#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    log         127.0.0.1 local2 info    #Log configuration
    # create a rsyslog.d/haproxy.conf with rules to create
    # /var/log/haproxy.log file.

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     {{ (150 / salt['pillar.get']('haproxy:nbproc', 2)) | round(0, 'ceil') | int }}
    user        haproxy             #Haproxy running under user and group "haproxy"
    group       haproxy

{% if "physical" in grains['virtual'] %}
    nbproc      {{ salt['pillar.get']('haproxy:nbproc', 2) }}
{% else %}
    nbproc      2
{% endif %}
    daemon

    # turn on stats unix socket
    #stats socket /var/lib/haproxy/stats

    #SSL options
    tune.ssl.default-dh-param 2048

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    option                  redispatch
    log                     global
    option                  httplog
    option                  log-separate-errors
    option                  dontlognull
    #option                  http-tunnel
    option                  forwardfor
    errorfile               503 /etc/haproxy/errors/503.http

    retries                 3

    timeout http-request    10s
    timeout queue           10s

    # Connect timeout to server
    timeout connect         5s

    # Inactivity timeout w.r.t S3 client
    timeout client          360s

    # Inactivity timeout w.r.t backend S3 servers
    timeout server          360s

    timeout http-keep-alive 10s
    #timeout tunnel          60s
    timeout client-fin      20s
    timeout check           10s
    maxconn                 3000


#---------------------------------------------------------------------
#HAProxy Monitoring Config
#---------------------------------------------------------------------
# listen haproxy3-monitoring *:8080                #Haproxy Monitoring run on port 8080
#     mode http
#     option forwardfor
#     option httpclose
#     stats enable
#     stats show-legends
#     stats refresh 10s
#     stats uri /stats                             #URL for HAProxy monitoring
#     stats realm Haproxy\ Statistics
#     #stats auth howtoforge:howtoforge            #User and Password for login to the monitoring dashboard
#     #stats admin if TRUE
#     #default_backend app-main                    #This is optionally for monitoring backend
{%- set cluster_ip = salt['pillar.get']('cluster:cluster_ip', None) -%}

{%- if pillar['cluster'][grains['id']]['network']['data_nw']['pvt_ip_addr'] %}    
{% set pvt_ip = pillar['cluster'][grains['id']]['network']['data_nw']['pvt_ip_addr'] %}
{%- else %}
{%- set pvt_ip_if = pillar['cluster'][grains['id']]['network']['data_nw']['iface'][1] %}
{% set pvt_ip = grains['ip4_interfaces'][pvt_ip_if][0] %}
{%- endif -%}


{%- if pillar['cluster'][grains['id']]['network']['data_nw']['public_ip_addr'] %}
{% set pub_data_ip = pillar['cluster'][grains['id']]['network']['data_nw']['public_ip_addr'] %}
{%- else %}
{%- set pub_data_if = pillar['cluster'][grains['id']]['network']['data_nw']['iface'][0] %}
{%- if grains['ip4_interfaces'][pub_data_if] %}
{% set pub_data_ip = grains['ip4_interfaces'][pub_data_if][0] %}
{%- else %}
{% set pub_data_ip = None %}
{%- endif -%}
{%- endif -%}

#---------------------------------------------------------------------
# FrontEnd Configuration
#---------------------------------------------------------------------
frontend main
    # s3 server port
{%- if cluster_ip %}
    bind {{ cluster_ip }}:80
    bind {{ cluster_ip }}:443 ssl crt /etc/ssl/stx/stx.pem
{%- endif %}
    bind 127.0.0.1:80 ##### localhost 80 required for Auth - S3 connection
    bind 127.0.0.1:443 ssl crt /etc/ssl/stx/stx.pem ### localhost required for CSM/UDX
    bind {{ pvt_ip }}:80
    bind {{ pvt_ip }}:443 ssl crt /etc/ssl/stx/stx.pem
{%- if pub_data_ip %}
    bind {{ pub_data_ip }}:80
    bind {{ pub_data_ip }}:443 ssl crt /etc/ssl/stx/stx.pem
{%- endif %}

    option forwardfor
    default_backend app-main

    # s3 auth server port
    bind 0.0.0.0:9080
    bind 0.0.0.0:9443 ssl crt /etc/ssl/stx/stx.pem

    acl s3authbackendacl dst_port 9443
    acl s3authbackendacl dst_port 9080
    use_backend s3-auth if s3authbackendacl

#---------------------------------------------------------------------
# BackEnd roundrobin as balance algorithm
#---------------------------------------------------------------------
backend app-main
    balance static-rr                                     #Balance algorithm
    http-response set-header Server SeagateS3
    # Check the S3 server application is up and healthy - 200 status code
    option httpchk HEAD / HTTP/1.1\r\nHost:\ localhost

    # option log-health-checks
    default-server inter 2s fastinter 100 rise 1 fall 5 on-error fastinter

    # With the lines under for enabling SSL communication i.e. HTTPS
    {%- if pillar['haproxy']['backend']['s3server']['ssl_enabled'] -%}
        {%- set s3_backend_ssl_tag = "ssl verify required ca-file /etc/ssl/stx/stx.pem" -%}
    {%- else -%}
        {%- set s3_backend_ssl_tag = "" -%}
    {%- endif -%}



{%- for i in range(0, pillar['s3server']['no_of_inst']) %}
{% set port = 28081 + i %}
{% set instance_id = 100 + i %}
    server s3-instance-{{ instance_id }} {{ pvt_ip }}:{{ port }} check {{ s3_backend_ssl_tag }} # s3 instance {{ instance_id }}
{%- endfor %}

    # with
    # server s3-instance-1 {{ pvt_ip }}:8081 check ssl verify required ca-file /etc/ssl/stx/stx.pem
    # server s3-instance-2 {{ pvt_ip }}:8082 check                  # s3 instance 2

#----------------------------------------------------------------------
# BackEnd roundrobin as balance algorith for s3 auth server
#----------------------------------------------------------------------
backend s3-auth
    balance static-rr                                     #Balance algorithm

    # Check the S3 Auth server application is up and healthy - 200 status code
    option httpchk HEAD /auth/health HTTP/1.1\r\nHost:\ localhost

    # option log-health-checks
    default-server inter 2s fastinter 100 rise 1 fall 5 on-error fastinter

    {% if pillar['haproxy']['backend']['s3authserver']['ssl_enabled'] -%}
        {%- set s3auth_backend_port = 9086 -%}
        {%- set s3auth_backend_ssl_tag = "ssl verify required ca-file /etc/ssl/stx/stx.pem" -%}
    {%- else -%}
        {%- set s3auth_backend_port = 9085 -%}
        {%- set s3auth_backend_ssl_tag = "" -%}
    {%- endif %}
    
    server s3authserver-instance1 {{ pvt_ip }}:{{ s3auth_backend_port }}
    #server s3authserver-instance1 {{ pvt_ip }}:{{ s3auth_backend_port }} check {{ s3auth_backend_ssl_tag }} # s3 auth server instance 1
