#!/bin/sh

# Functions in this file address following:
#   1. Check boxing flag file and proceed only if boxing.<timestamp> file is present 
#       /opt/seagate/eos-prvsnr/generated_config/boxing.<timestamp> 
#   2. Check if IP is available on management network interface on node. Wait till one is obtained. 
#   3. Check if hostname is available on node. Wait till one is obtained. 
#   4. Ping across nodes over direct network to check connectivity and fetch peer hostname. Wait till success. 
#       From node-1 
#       $ ping -c1 -I<public_data_ip> eosnode-2 
#       From node-2 
#       $ ping -c1 -I<public_data_ip> eosnode-1 
# NOTE: pick value of public_data_ip from cluster.sls
set -euE

BASEDIR=$(dirname "${BASH_SOURCE}")

. ${BASEDIR}/../utils

export PRVSNR_ROOT="/opt/seagate/eos-prvsnr"
export LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/unboxing_system_check.log}"
truncate -s 0 ${LOG_FILE}

function trap_handler {
  echo "For detailed error logs, please see: $LOG_FILE"
}
trap trap_handler ERR


# export private_data_ip_node_1=$(grep -m1 -A8 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|grep "pvt_ip_addr"|tail -n1|cut -d':' -f2|tr -d "[:space:]")
# export private_data_ip_node_2=$(grep -m2 -A8 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|grep "pvt_ip_addr"|tail -n1|cut -d':' -f2|tr -d "[:space:]")

export private_data_ip_node_1=$(get_pillar_data cluster:srvnode-1:network:data_nw:pvt_ip_addr)
export private_data_ip_node_2=$(get_pillar_data cluster:srvnode-2:network:data_nw:pvt_ip_addr)

function check_boxing_flag {
    if [[ -f '/opt/seagate/cortx/provisioner/generated_config/boxed' ]]
    then
        echo "INFO: Boxed file found." | tee ${LOG_FILE}
    else
        echo "ERROR: Boxed file not found. Cannot initiate unboxing sequence." | tee ${LOG_FILE}
        exit 1
    fi
}

function check_salt_services {
    # Check salt-master running on primary node.
    if ! systemctl status salt-master>/dev/null; then
        systemctl start salt-master
    fi

    # Check salt-minion on primary node.
    if ! systemctl status salt-master>/dev/null; then
        systemctl start salt-minion
    fi

    # Check salt-minion on secondary node.
    local node_2_private_data_ip=$(grep -m2 -A8 -P "data_nw:" ${PRVSNR_ROOT}/pillar/components/cluster.sls|grep "pvt_ip_addr"|tail -n1|cut -d':' -f2|tr -d "[:space:]")
    if [[ -f "${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls" ]]; then
        node_2_private_data_ip=$(grep -m2 -A8 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|grep "pvt_ip_addr"|tail -n1|cut -d':' -f2|tr -d "[:space:]")
    fi
    if ! (ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${node_2_private_data_ip} "systemctl status salt-master>/dev/null"); then
        ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${node_2_private_data_ip} "systemctl start salt-minion"
    fi
}

function check_hostname {
    echo "Hostname check on primary node"|tee -a ${LOG_FILE}
    hostname 2>&1|tee -a ${LOG_FILE}

    echo "Hostname check on secondary node"|tee -a ${LOG_FILE}
    ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "hostname" 2>&1|tee -a ${LOG_FILE}
}

function check_pvt_data_connectivity {
    local private_data_if=$(grep -m1 -A4 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|tail -1|cut -d'-' -f2|tr -d "[:space:]")
    
    # node1 => node2: private data interface
    ping -c1 -W2 -I${private_data_if} ${private_data_ip_node_2} || (echo "ERROR: Unable to ping srvnode-2 from srvnode-1, over ${private_data_if}" |tee ${LOG_FILE}; exit 1)

    # node2 => node1: private data interface
    ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "ping -c1 -W2 -I${private_data_if} ${private_data_ip_node_1}" || (echo "ERROR: Unable to ping srvnode-1 from srvnode-2, over ${private_data_if}" |tee ${LOG_FILE}; exit 1)
}

function check_mgmt_ip {
    # Although ways to test public data IP are available;
    # Only management IP would be tested as public data IP would be later updated during onboarding.

    local mgmt_if=$(grep -m1 -A3 -P "mgmt_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|tail -1|cut -d'-' -f2|tr -d "[:space:]")
    # local public_data_if=$(grep -m1 -A3 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|tail -1|cut -d'-' -f2|tr -d "[:space:]")
    # local private_data_if=$(grep -m1 -A4 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|tail -1|cut -d'-' -f2|tr -d "[:space:]")

    # Node-1 IPs
    # ip for mgmt interface
    local mgmt_ip_1=$((ip addr show dev ${mgmt_if}|grep inet|grep -v inet6|grep -Po "\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}" || echo "ERROR: IP address missing for ${mgmt_if} on srvnode-1" || (tee ${LOG_FILE}; exit 1))|head -1)
    echo "Management IP of srvnode-2 ${mgmt_ip_1}" | tee ${LOG_FILE}
    
    # ip for public data interface
    # local public_data_ip_1=$(ip addr show dev ${public_data_if}|grep inet|grep -v inet6|grep -Po "\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}"|head -1)
    # echo ${public_data_ip_1}

    # Node-2 IPs
    # ip for mgmt interface
    local mgmt_ip_2=$((ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "ip addr show dev ${mgmt_if}|grep inet|grep -v inet6|grep -Po \"\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}\"" || (echo "ERROR: IP address missing for ${mgmt_if} on srvnode-2" | tee ${LOG_FILE}; echo 1))|head -1)
    echo "Management IP of srvnode-2 ${mgmt_ip_2}" | tee ${LOG_FILE}
    
    # ip for public data interface
    # local public_data_ip_2=$(ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "ip addr show dev ${public_data_if}|grep inet|grep -v inet6|grep -Po \"\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}\"|head -1")
    # echo ${public_data_ip_2}

    # Start ping test
    # node1 => node2: mgmt interface
    # node1 => node2: private data interface
    ping -c1 -W2 -I${mgmt_if} ${mgmt_ip_2} || (echo "ERROR: Unable to ping srvnode-2 from srvnode-1, over ${mgmt_if}" |tee ${LOG_FILE}; exit 1)

    # node2 => node1: private data interface
    ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "ping -c1 -W2 -I${mgmt_if} ${mgmt_ip_1}" || (echo "ERROR: Unable to ping srvnode-1 from srvnode-2, over ${mgmt_if}" |tee ${LOG_FILE}; exit 1)
}
