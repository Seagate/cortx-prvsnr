#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#



set -euE

trap trap_handler ERR

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/destroy-vm.log}"
export LOG_FILE

. $BASEDIR/common_utils/functions.sh

function trap_handler {
  echo "For more details see $LOG_FILE"
} 

run_all=true
io_states=false
ctrlpath_states=false
remove_prereqs=false
remove_system=false
remove_prvsnr=false


controlpath_states=(
# states to be applied in desired sequence
    "csm"
    "uds"
    "sspl"
)

iopath_states=(
# states to be applied in desired sequence
    "hare"
    "s3server"
    "motr"
)

prereq_states=(
    # states to be applied in desired sequence
    "misc_pkgs.lustre"
    "misc_pkgs.statsd"
    "misc_pkgs.kibana"
    "misc_pkgs.elasticsearch"
    "misc_pkgs.nodejs"
    "misc_pkgs.rabbitmq"
    "misc_pkgs.consul"
    "misc_pkgs.openldap"
    "ha.haproxy"
    "misc_pkgs.ssl_certs"
)

system_states=(
    # states to be applied in desired sequence
    "system.chrony"
    "system.logrotate"
    "system.firewall"
    "misc_pkgs.rsyslog"
    "system.storage"
    "system"
)

function usage {
  echo "\
Usage: $0 [options]

Removes CORTX stack and cleanups cortx dependencies on VM environment.

Must be run from primary node for Dual node and from VM itself for single node.

General options:
$base_options_usage
Options:
       -S,  --singlenode     switch to single node mode setup
       --iopath-states       remove only iopath (hare,s3server,motr,lustre) components
       --ctrlpath-states     remove only ctrlpath (uds,csm,sspl) components
       --remove-prvsnr       removes provisioner and system cleanup
       --prereq-states       remove only teardown of prereq components
       --system-states       remove only teardown of system components
"
}

function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            ;;
        --iopath-states)
            io_states=true
            run_all=false
            ;;
        --ctrlpath-states)
            ctrlpath_states=true
            run_all=false
            ;;
        --prereq-states)
            remove_prereqs=true
            run_all=false
            ;;
        --system-states)
            remove_system=true
            run_all=false
            ;;
        --remove-prvsnr)
            remove_prvsnr=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function teardown_states {
    local states=${@}

    # apply states
    for state in ${states[@]}; do
        if [[ "$state" == "hare" ]]; then
            l_info "Removing 'components.$state.teardown'"
            hctl shutdown || true 2>&1|tee ${LOG_FILE}
        fi
        if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
            l_info "Removing 'components.$state.teardown'"
            $cmd salt srvnode-1 state.apply components.$state.teardown $salt_opts || true
            sleep 2     # Mindfulness break
        else
            if [[ "$state" == "sspl" ]]; then
                l_info "Removing $state from srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
                l_info "Removing $state from srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
            elif [[ "$state" == "misc_pkgs.openldap" || "$state" == "misc_pkgs.rabbitmq" ]]; then
                l_info "Removing $state from srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
                l_info "Removing $state from srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state.teardown  $salt_opts || true
                sleep 2     # Mindfulness break
            else
                l_info "Removing $state from both nodes"
                $cmd salt '*' state.apply components.$state.teardown $salt_opts || true
                sleep 2     # Mindfulness break
            fi
        fi
    done
}

parse_args 'S' 'singlenode,iopath-states,ctrlpath-states,remove-prvsnr,prereq-states,system-states' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
salt_opts_dry_run=
if [[ "$dry_run" == true ]]; then
    salt_opts_dry_run="test=True"
fi
salt_opts="--no-color --out-file=$LOG_FILE --out-file-append $salt_opts_dry_run"

# Refresh salt pillar data
l_info "Updating salt pillar data"
$cmd salt "*" saltutil.refresh_pillar

if [[ "$run_all" == true ]]; then
    teardown_states "${controlpath_states[@]}"
    teardown_states "${iopath_states[@]}"
    teardown_states "${prereq_states[@]}"
    teardown_states "${system_states[@]}"
fi

if [[ "$ctrlpath_states" == true ]]; then
    l_info "Removing the control path group packages"
    teardown_states "${controlpath_states[@]}"
fi

if [[ "$io_states" == true ]]; then
    l_info "Removing the IO path group packages"
    teardown_states  "${iopath_states[@]}"
fi

if [[ "$remove_prereqs" == true ]]; then
    l_info "Removing the third party group packages"
    teardown_states  "${prereq_states[@]}"
fi

if [[ "$remove_system" == true ]]; then
    l_info "Unconfiguring the settings from System group states"
    teardown_states  "${system_states[@]}"
fi

if [[ "$run_all" == true || "$io_states" == true ]]; then
    l_info "Cleaning up the failed-services on both nodes"
    salt '*' cmd.run "systemctl reset-failed" $salt_opts

    l_info "Cleaning up the failed-services on both nodes"
    systemctl list-units --state=running | grep hare-consul-agent &&
        systemctl stop hare-consul-agent || true
    if [[ "$singlenode" != true ]]; then
        ssh srvnode-2 " systemctl list-units --state=running | grep\
            hare-consul-agent && systemctl stop hare-consul-agent" || true
    fi
fi

if [[ "$remove_prvsnr" == true ]]; then
    l_info "Cleaning up Provisioner"

    l_info "Removing prvsnr api logs configuration from node-1"
    rm -rf /etc/rsyslog.d/prvsnrfwd.conf || true
    rm -rf /etc/rsyslog.d/2-prvsnrfwd.conf || true

     l_info "Removing cortx-prvsnr api package from both nodes"
     salt '*' pkg.remove python36-cortx-prvsnr $salt_opts || true

    l_info "Removing cortx-prvsnr package from both nodes"
    salt '*' pkg.remove cortx-prvsnr $salt_opts || true
    salt '*' file.absent $salt_opts || true
    if [[ "$singlenode" != true ]]; then
        l_info "Removing prvsnr-cli and salt packages from node-2"
        ssh srvnode-2 "yum remove -y cortx-prvsnr-cli; yum remove -y salt*; 
            rm -rf /etc/salt; rm -rf /opt/seagate; rm -rf /var/cache/salt;" 2>&1|tee ${LOG_FILE}
    fi
    l_info "Removing salt packages from node-1"
    yum remove -y salt* || true 2>&1|tee ${LOG_FILE}
    rm -rf /etc/salt; rm -rf /var/cache/salt;

    sleep 2
    if [[ "$singlenode" != true ]]; then
        l_info "Removing remaining cortx packages from node-2"
        ssh srvnode-2 'for pkg in `rpm -qa | grep cortx`; do\
            echo "INFO: Removing ${pkg}"; yum -q remove -y ${pkg}; done;\
            rm -rf /opt/seagate*; rm -rf /root/.ssh/*'
    fi

    l_info "Removing remaining cortx packages from node-1"
    for pkg in `rpm -qa | grep cortx`; do\
        echo "INFO: Removing ${pkg}"; yum -q remove -y ${pkg}; done

    l_info "Removing /opt/seagate directory from node-1"
    rm -rf /opt/seagate; rm -rf /root/.ssh/*
fi

l_info "***** SUCCESS! *****"
l_info "The detailed logs can be seen at: $LOG_FILE"
l_info "Done"
