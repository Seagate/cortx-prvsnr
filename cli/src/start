#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing, 
# please email opensource@seagate.com or cortx-questions@seagate.com."
#



set -eu

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

. $BASEDIR/common_utils/functions.sh

restart=false

function usage {
  echo "\
Usage: $0 [options]

Starts all CORTX services either on remote host or locally.

Restart CORTX services if '--restart' flag is explicitly
specified.

Target host is considered to be an CORTX salt-master.

General options:
$base_options_usage

Options:
    -R,  --restart              restart all services
"
}

# TODO tests
function options_parser {
    case "$1" in
        -R|--restart)
            restart=true
            ;;
        *)
            l_error "Unknown option: $1"
            exit 5
    esac
}

parse_args 'R' 'restart' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
if [[ "$dry_run" == true ]]; then
    salt_opts="test=True"
fi

target_minions='*'
if [[ -n "$hostspec" ]]; then
    target_minions="'*'"
fi

if [[ "$restart" == true ]]; then
    l_info "Applying 'components.stop' for all nodes"
    $cmd salt "$target_minions" state.apply components.stop $salt_opts
fi

l_info "Applying 'components.start' for all nodes"
$cmd salt "$target_minions" state.apply components.start $salt_opts

l_info "Done"
