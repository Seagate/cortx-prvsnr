[EOS-15766]: Test- Resume update process after reboot

Step-1: Deploy Cortx software stack on VM/HW and verify update-post-boot.service is enabled
        `$systemctl status update-post-boot.service`

Step-2: Create update_states.sls pillar and add provisioner commands stating which states will run before and after reboot
        `$provisioner pillar_set update_states/pre_boot [\"command1\",\ \"command2\"]`
        `$provisioner pillar_set update_states/post_boot [\"command1\",\ \"command2\"]`

Step-3: Reboot servers

Step-4: Check update-post-boot.service status once the system's are back. 
        Service should be inactive but `/opt/seagate/cortx/provisioner/cli/update-post-reboot.sh` should have got executed. 
        Also commands added in update_states/post_boot should be executed.

[EOS-15751]: Test - Setup R2 upgrade release bundle

Pre-requisites:
    1. Need to be installed
        - glusterfs
        - saltstack
        - provisioner api
    2. It is enough to configure provisioner using the following command, for example:
        ```
        run provisioner setup_cluster --source local --srvnode1 <IP1> --srvnode2 <IP2> --ha --logfile --logfile-filename ./setup.log --console-formatter full
        ```
       where
       <IP1> and <IP2> - ip addresses of VM nodes

Step-1: Ensure that there are not enabled or disabled `sw_upgrade_*` yum repos
        `$ yum repolist enabled`
        `$ yum repolist disabled`

Step-2: a)  For testing `set_swupgrade` command is enough to download any valid single ISO.
            For example, this ISO:

            http://cortx-storage.colo.seagate.com/releases/cortx/github/cortx-1.0/iso/cortx-1.0-280.iso

        b)  To create the valid Singe SW Upgrade ISO structure is needed to create

            1. `$ mkdir sw_upgrade`
            2. `$ cd sw_upgrade`
            3. `$ mkdir 3rdparty`
            4. `$ mkdir os`
            5. `$ mkdir cortx`
            6. `$ mkdir python`
            7. `$ sudo cortx-1.0-280.iso /mnt/iso`
            8. `$ cp -r /mnt/iso ./3rdparty`
            9. `$ cp -r /mnt/iso ./cortx`
            10. `$ cp -r /mnt/iso ./os`
            11. `$ cd ..`
            12. `$ mkisofs -graft-points -r -l -iso-level 2 -J -o sw_upgrade.iso ./sw_upgrade/`

        c)  After the steps mentioned above we have the `sw_upgrade.iso` which can be used for the
            `set_swupgrade` command testing

Step-3: Run provisioner command:

        `$ provisioner set_swupgrade_repo 1.0.0 --source="./sw_upgrade.iso" --username=<provisioner_user> --password=<provisioner_user_password>`

        Command should be finished successfully.

Step-4: Check that all yum repositories are listed in `$ yum repolist enabled` output:

        Example of possible output
        ```
         $ yum repolist enabled
         Loaded plugins: fastestmirror, product-id, search-disabled-repos, subscription-manager
         Repository extras is listed more than once in the configuration
         Loading mirror speeds from cached hostfile
         repo id                                                             repo name                                                    status
         base                                                                base                                                         14,689+32
         cortx_commons                                                       cortx_commons                                                  334+129
         epel                                                                3rd_party_epel                                                  16,808
         extras                                                              extras                                                             451
         saltstack/7/x86_64                                                  SaltStack repo for RHEL/CentOS 7                                 93+34
         sw_upgrade_3rdparty_1.0.0-301                                       Cortx Upgrade repo 3rdparty-1.0.0-301                               22
         sw_upgrade_cortx_1.0.0-301                                          Cortx Upgrade repo cortx-1.0.0-301                                  22
         sw_upgrade_os_1.0.0-301                                             Cortx Upgrade repo os-1.0.0-301
         ```

[EOS-16927]: New API for upgrade: adjust rollback logic for R2 (singlenode)

Step-1: Ensure rollback pillar data is present/updated as part of sw_update command
        `$salt-call pillar.get rollback`

Step-2: Run sw_rollback api
        `$provisioner sw_rollback CORTX_VERSION`


[EOS-18337]: Make bootstrap API salt states for cortx repositories available in deployed environment

Step-1: Start the docker container

```bash
pytest test/build_helpers -k test_build_setup_env -s --root-passwd root --nodes-num 1
```

Step-2: Install provisioner API to created docker container

```bash
provisioner setup_provisioner --source local --logfile --logfile-filename ./setup.log --console-formatter full srvnode-1:172.17.0.2
```

NOTE: For **srvnode-1**, **srvnode-2**, etc. parameter values use the **Hostname** output from previous step

Step-3: Copy the `devops` directory of `cortx-prvsnr` repository

```bash
cd /PATH/TO/cortx-prvsnr/
docker cp ./devops/ <CONTAINER ID>:/opt/seagate/cortx/provisioner/devops
```

Step-4: Build core `cortx-prvsnr` RPM package

```bash
docker exec -it <CONTAINER ID> bash
bash -x /opt/seagate/cortx/provisioner/devops/rpms/buildrpm.sh -g 123456
yum install /root/rpmbuild/RPMS/x86_64/cortx-prvsnr-2.0.0-0_git123456_el7.x86_64.rpm
```

Step-4: Validate that `repos` states are available and visible for salt commands

```bash
salt-call state.id_exists "configure pip" repos.pip_config
```

  NOTE: Useful command to list all salt states
```bash
salt-call state.show_top
```
