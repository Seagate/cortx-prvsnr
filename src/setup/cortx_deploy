#!/bin/bash

# Log Levels:
DEBUG=1
INFO=2
WARNING=3
ERROR=4
FATAL=5
DEFAULT_LOG_LEVEL=${DEFAULT_LOG_LEVEL:-$INFO}

function log {
    LEVEL=$1; shift
    LOG_LEVEL=${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}
    [[ $LEVEL -lt $LOG_LEVEL ]] && return

    echo "log: $*"
}

function show_usage {
    echo -e "usage: $(basename $0) [-f SOLUTION-CONFIG] [-l LOG-LEVEL][-c CORTX-CONFIG-URL] [-m] [-d]"
    echo -e "Where:"
    echo -e "..."
    echo -e " SOLUTION-CONFIG : Solution-Config directory containing -\
                                config.yaml, cluster.yaml and secrets.yaml"
    echo -e "                   (Default: /etc/cortx/solution)"
    echo -e " LOG-LEVEL       : Log Level (Default: 2)"
    echo -e "                   Supported log levels:"
    echo -e "                   DEBUG=1, INFO=2, WARNING=3, ERROR=4, FATAL=5"
    echo -e " CORTX-CONFIG-URL: URL of CORTX Configuration"
    echo -e "                   (Default is yaml:///etc/cortx/cluster.conf)"
    echo -e " ENABLE MOCK     : Enable Mocking CORTX Deployment (Default: False)"
    echo -e " ENABLE DEBUG    : Enable Debugging CORTX Deployment (Default: False)"
    exit 1
}

function validate_config {
    local config=$1
    if [ ! -f $config ]; then
        echo -e "ERROR: Config $config not found"
    fi
}

function yaml_config {
    local config=$1
    echo "yaml://$config"
}

# Constants
DEBUG_FLAG=false
MOCK_FLAG=false
SETUP_ARGS=""
SOLUTION_CONFIG="/etc/cortx/solution"
CORTX_CONFSTORE="yaml:///etc/cortx/cluster.conf"

while [ $# -gt 0 ];  do
    case $1 in
    -l )
        shift 1
        LOG_LEVEL=$1
        ;;
    -n )
        shift 1
        NODE_ID=$1
        ;;
    -m )
        SETUP_ARGS="-m"
        MOCK_FLAG=true
        ;;
    -d )
        DEBUG_FLAG=true
        ;;
    -f )
        shift 1
        SOLUTION_CONFIG=$1
        ;;
    -c )
        shift 1
        CORTX_CONFSTORE=$1
        ;;
    -h )
        show_usage
        ;;
    -v )
        VALIDATE_CONF="-v"
        ;;
    * )
        echo -e "Invalid argument provided : $1"
        show_usage
        exit 1
        ;;
    esac
    shift 1
done

# path for solution-config cluster.yaml and config.yaml files
CONFIG_INFO="$SOLUTION_CONFIG/config.yaml"
validate_config $CONFIG_INFO
CLUSTER_INFO="$SOLUTION_CONFIG/cluster.yaml"
validate_config $CLUSTER_INFO

export PATH=$PATH:/opt/seagate/provisioner/bin

# Apply Cluster Config
log $INFO "cortx_setup config apply -f $(yaml_config $CLUSTER_INFO) -c '$CORTX_CONFSTORE'"
cortx_setup config apply -f $(yaml_config $CLUSTER_INFO) -c "$CORTX_CONFSTORE";

# Apply Common Config
log $INFO "cortx_setup config apply -f $(yaml_config $CONFIG_INFO) -c '$CORTX_CONFSTORE'"
cortx_setup config apply -f $(yaml_config $CONFIG_INFO) -c "$CORTX_CONFSTORE";

# Check if mocking is enabled
if [ $MOCK_FLAG = true ]; then
    log $INFO "cortx_setup MOCK enabled...";
    sleep infinity;
fi

# Validate config
if ! [ -z $VALIDATE_CONF ];
then
    log $INFO "cortx_setup config validate -f $(yaml_config $CLUSTER_INFO) -c '$CORTX_CONFSTORE'"
    cortx_setup config validate -f $(yaml_config $CLUSTER_INFO) -c "$CORTX_CONFSTORE" || exit 1
    log $INFO "cortx_setup config validate -f $(yaml_config $CONFIG_INFO) -c '$CORTX_CONFSTORE'"
    cortx_setup config validate -f $(yaml_config $CONFIG_INFO) -c "$CORTX_CONFSTORE" || exit 1
fi

# Bootstrap Cluster
log $INFO "cortx_setup cluster bootstrap -c "$CORTX_CONFSTORE" $SETUP_ARGS"
cortx_setup cluster bootstrap -c "$CORTX_CONFSTORE" $SETUP_ARGS;

# Check if debugging is enabled
if [ $DEBUG_FLAG = true ]; then
    log $INFO "cortx_setup DEBUG enabled...";
    sleep infinity;
fi
