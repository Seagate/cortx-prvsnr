#!/bin/bash
set -e;

# Log Levels:
DEBUG=1
INFO=2
WARNING=3
ERROR=4
FATAL=5
DEFAULT_LOG_LEVEL=${DEFAULT_LOG_LEVEL:-$INFO}

function log {
    LEVEL=$1; shift
    LOG_LEVEL=${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}
    [[ $LEVEL -lt $LOG_LEVEL ]] && return

    echo "log: $*"
}

function show_usage {
    echo -e "usage: $(basename $0) [-f SOLUTION-CONFIG] [-l LOG-LEVEL][-c CORTX-CONFIG-URL] [-o] [-d] [-v]"
    echo -e "Where:"
    echo -e "..."
    echo -e " SOLUTION-CONFIG : Solution-Config directory containing -\
                                config.yaml, cluster.yaml and secrets.yaml"
    echo -e "                   (Default: /etc/cortx/solution)"
    echo -e " LOG-LEVEL       : Log Level (Default: 2)"
    echo -e "                   Supported log levels:"
    echo -e "                   DEBUG=1, INFO=2, WARNING=3, ERROR=4, FATAL=5"
    echo -e " CORTX-CONFIG-URL: URL of CORTX Configuration"
    echo -e "                   (Default is yaml:///etc/cortx/cluster.conf)"
    echo -e " FORCE OVER-RIDE : Force provisioning even after CORTX configuration."
    echo -e " ENABLE DEBUG    : Enable Debugging CORTX Deployment (Default: False)"
    echo -e " VALIDATE CONFIG : Validate constore and configmap config."
    exit 1
}

function make_url {
    local config=$1
    echo "yaml://$config"
}

function conf_get {
    URL=$1; key=$2
    val=$(conf $URL get $key)
    val=$(echo $val | tr -d "["\" | tr -d "\"]")
    echo $val
}

function apply_config {
    for file in "$SOLUTION_CONFIG"/*
    do
        [[ ! -f "$file" ]] && return
        if [[ "$(conf_get $(make_url $file) 'cluster')" != "null" || "$(conf_get $(make_url $file) 'cortx')" != "null" ]]
        then
            log $INFO "cortx_setup config apply -f $(make_url $file) -c '$CORTX_CONFSTORE' $FORCE_PROVISIONING"
            cortx_setup config apply -f $(make_url $file) -c "$CORTX_CONFSTORE" $FORCE_PROVISIONING;
        fi
    done
}

function deploy {
    # Bootstrap Cluster
    log $INFO "cortx_setup cluster bootstrap -c '$CORTX_CONFSTORE' $FORCE_PROVISIONING"
    cortx_setup cluster bootstrap -c "$CORTX_CONFSTORE" $FORCE_PROVISIONING;
}

function upgrade {
    # Upgrade cluster
    log $INFO "cortx_setup cluster upgrade -c '$CORTX_CONFSTORE' $FORCE_PROVISIONING"
    cortx_setup cluster upgrade -c "$CORTX_CONFSTORE" $FORCE_PROVISIONING;
}

function validate_config {
    for file in "$SOLUTION_CONFIG"/*
    do
        # Validate config
        [[ ! -f "$file" ]] && return
        if [[ "$(conf_get $(make_url $file) 'cluster')" != "null" || "$(conf_get $(make_url $file) 'cortx')" != "null" ]]
        then
            log $INFO "cortx_setup config validate -f $(make_url $file) -c '$CORTX_CONFSTORE'"
            cortx_setup config validate -f $(make_url $file) -c "$CORTX_CONFSTORE" || return 1
        fi
    done
}

function compare {
    # Returns
    # -1 if $1 < v2
    # 0 if $1 == $2
    # 1 if $1 > $2
    deploy_ver_spec=${1%-[0-9]*}
    release_ver_spec=${2%-[0-9]*}

    deploy_ver=${deploy_ver_spec%.[0-9]}
    release_ver=${release_ver_spec%.[0-9]}
    [[ $deploy_ver < $release_ver ]] && echo "-1" && return
    [[ $deploy_ver > $release_ver ]] && echo "1" && return

    deploy_ver=${deploy_ver_spec#[0-9].[0-9].}
    release_ver=${release_ver_spec#[0-9].[0-9].}
    [[ $deploy_ver -lt $release_ver ]] && echo "-1" && return
    [[ $deploy_ver -gt $release_ver ]] && echo "1" && return

    deploy_build=${1#[0-9.]*-}
    release_build=${2#[0-9.]*-}
    [[ $deploy_build -lt $release_build ]] && echo "-1" && return
    [[ $deploy_build -gt $release_build ]] && echo "1" && return

    echo "0"
}

# Constants
DEBUG_FLAG=false
SOLUTION_CONFIG="/etc/cortx/solution"
CORTX_CONFSTORE="yaml:///etc/cortx/cluster.conf"
RELEASE_INFO="yaml:///opt/seagate/cortx/RELEASE.INFO"

action="" # upgrade|deploy|downgrade|replace|recover|etc.

while [ $# -gt 0 ];  do
    case $1 in
    -l )
        shift 1
        LOG_LEVEL=$1
        ;;
    -n )
        shift 1
        NODE_ID=$1
        ;;
    -d )
        DEBUG_FLAG=true
        ;;
    -f )
        shift 1
        SOLUTION_CONFIG=$1
        ;;
    -c )
        shift 1
        CORTX_CONFSTORE=$1
        ;;
    -o )
       FORCE_PROVISIONING="-o"
       ;;
    -h )
        show_usage
        ;;
    -v )
        VALIDATE_CONF="-v"
        ;;
    * )
        echo -e "Invalid argument provided : $1"
        show_usage
        exit 1
        ;;
    esac
    shift 1
done

export PATH=$PATH:/opt/seagate/provisioner/bin

node_id=`cat /etc/machine-id`
log $INFO "Starting provisioning on node $node_id."

# Check current image version
installed_version=$(conf_get $CORTX_CONFSTORE "node>$node_id>provisioning>version")
release_version=$(conf_get $RELEASE_INFO "VERSION")

if [ $installed_version == "null" ]
then
    action="deploy"
else
    ret_code=$(compare $installed_version $release_version)
    [[ "$ret_code" == "0" && -z $FORCE_PROVISIONING ]] &&
        log $INFO "installed_version ($installed_version) = release_version ($release_version)" &&
        exit 0
    [[ "$ret_code" == "1" ]] &&
        log $ERROR "Invalid image. installed_version ($installed_version) > release_version ($release_version)" &&
        exit 1

    [[ ! -z $installed_version ]] && [[ "$ret_code" == "-1" ]] && action="upgrade"
fi

case $action in
    deploy)
        apply_config
        [ ! -z $VALIDATE_CONF ] && validate_config
        # Deploy cortx
        deploy
        ;;
    upgrade)
        # Upgrade cortx
        upgrade
        ;;
    *)
        log $ERROR "Internal error. Could not determine version. Invalid image. current_version is ($installed_version) and release_version is ($release_version)"
        ;;
esac
# Check if debugging is enabled
if [ $DEBUG_FLAG = true ]; then
    log $INFO "cortx_setup DEBUG enabled...";
    sleep infinity;
fi
