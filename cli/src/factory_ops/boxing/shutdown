#!/bin/sh
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


set -euE

export LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/boxing_shutdown.log}"
mkdir -p $(dirname "${LOG_FILE}")
truncate -s 0 ${LOG_FILE}

BASEDIR=$(dirname "${BASH_SOURCE}")

. ${BASEDIR}/../../common_utils/utility_scripts.sh


function trap_handler {
    echo -e "\n***** ERROR! *****"
    echo "For detailed error logs, please see: $LOG_FILE"
    echo "******************"
}
trap trap_handler ERR


#   shutdown_node.
#
#   Prerequisites:
#       - SaltStack is available.
#
#   Args:
#       node: One of the following:
#           `node1` - Shutdown srvnode-1
#           `node2` - Shutdown srvnode-2
#           `both`  - Shutdown both nodes
#
function shutdown_node {
    echo "DEBUG: Shutdown either or both nodes." >> ${LOG_FILE}

    local _node="${1:-both}"

    if [[ $# -gt 1 ]]; then
        echo "[ERROR] $0: Only one positional argument is expected, provided: $@" | tee -a ${LOG_FILE}
        exit 2
    fi

    if [[ "$_node" != "node1" && "$_node" != "node2" && "$_node" != "both" ]]; then
        echo "ERROR: This function accepts only 'node1', 'node2' or 'both' as an argument." | tee -a ${LOG_FILE}
        exit 1
    fi

    if [[ "$_node" == "node1" ]]; then
        echo "INFO: Shutting down Server A now..." | tee -a ${LOG_FILE}
        #salt srvnode-1 system.shutdown 1 --async
        shutdown now
    elif [[ "$_node" == "node2" ]]; then
        echo "INFO: Shutting down Server B now..." | tee -a ${LOG_FILE}
        #salt srvnode-2 system.shutdown 1 --async
        $ssh_cmd ${pvt_ip_b} shutdown now
    else
        echo "INFO: Shutting down both servers now..." | tee -a ${LOG_FILE}
        echo "INFO: shutting down Server B first.." | tee -a ${LOG_FILE}
        $ssh_cmd ${pvt_ip_b} shutdown now
        echo "INFO: shutting down Server A now.." | tee -a ${LOG_FILE}
        shutdown now
    fi
}

#   shutdown_controller.
#
#   Prerequisites:
#       - SaltStack is available.
#
#   Args:
#       node: One of the following:
#           `a` - Shutdown Controller-A
#           `b` - Shutdown Controller-B
#           `both`  - Shutdown both nodes
#
function shutdown_controller {
    echo "INFO: Shutdown either or both nodes." | tee -a ${LOG_FILE}

    local _node="${1:-both}"

    if [[ $# -gt 1 ]]; then
        echo "[ERROR] $0: Only one positional argument is expected, provided: $@" | tee -a ${LOG_FILE}
        exit 2
    fi

    if [[ "$_node" != "a" && "$_node" != "b" && "$_node" != "both" ]]; then
        echo "ERROR: This function accepts only 'node1', 'node2' or 'both' as an argument." | tee -a ${LOG_FILE}
        exit 1
    fi

    local ctrl_cli="/opt/seagate/cortx/provisioner/srv/components/controller/files/scripts/controller-cli.sh"
    
    local ctrl_user=$(get_pillar_data storage_enclosure:controller:user)
    local ctrl_secret=$(get_pillar_data storage_enclosure:controller:secret)
    local ctrl_ip=$(get_pillar_data storage_enclosure:controller:primary_mc:ip)
    if [[ "$(salt-call grains.get id --output=newline_values_only)" == "srvnode-2" ]]; then
        ctrl_ip=$(get_pillar_data storage_enclosure:controller:secondary_mc:ip)
    fi

    if [[ "$_node" == "node1" ]]; then
        ${ctrl_cli} host -h "${ctrl_ip}" -u "${ctrl_user}" -p "${ctrl_secret}" --restart-ctrl a
        # ${ctrl_cli} host -h "${ctrl_ip}" -u "${ctrl_user}" -p "${ctrl_secret}" --shutdown-ctrl a
    elif [[ "$_node" == "node2" ]]; then
        ${ctrl_cli} host -h "${ctrl_ip}" -u "${ctrl_user}" -p "${ctrl_secret}" --restart-ctrl a
        # ${ctrl_cli} host -h "${ctrl_ip}" -u "${ctrl_user}" -p "${ctrl_secret}" --shutdown-ctrl a
    else
        ${ctrl_cli} host -h "${ctrl_ip}" -u "${ctrl_user}" -p "${ctrl_secret}" --restart-ctrl
        # ${ctrl_cli} host -h "${ctrl_ip}" -u "${ctrl_user}" -p "${ctrl_secret}" --shutdown-ctrl
    fi
}
