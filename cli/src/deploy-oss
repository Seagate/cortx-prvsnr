#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#



set -euE


BASEDIR=$(dirname "${BASH_SOURCE}")

LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/deploy-cortx.log}"
export LOG_FILE

. $BASEDIR/common_utils/functions.sh

function trap_handler {
  echo "For detailed error logs, please see: $LOG_FILE"
}
trap trap_handler ERR

run_all=true
run_system_states=false
run_prereq_states=false

system_states=(
    # states to be applied in desired sequence
        "system"
        "system.storage.multipath"
        "system.storage"
        "system.network"
        "system.network.data.public"
        "system.network.data.direct"
        "misc_pkgs.rsyslog"
        "system.firewall"
        "system.logrotate"
        "system.chrony"
    )

prereq_states=(
    # states to be applied in desired sequence
        "misc_pkgs.ssl_certs"
        "ha.haproxy.prepare"
        "ha.haproxy.install"
        "misc_pkgs.openldap.prepare"
        "misc_pkgs.openldap.install"
        "misc_pkgs.rabbitmq.prepare"
        "misc_pkgs.rabbitmq.install"
        "misc_pkgs.nodejs.prepare"
        "misc_pkgs.nodejs.install"
        "misc_pkgs.elasticsearch.prepare"
        "misc_pkgs.elasticsearch.install"
        "misc_pkgs.elasticsearch.config"
        "misc_pkgs.kibana.prepare"
        "misc_pkgs.kibana.install"
        "misc_pkgs.statsd.prepare"
        "misc_pkgs.statsd.install"
        "misc_pkgs.lustre"
    )

function usage {
  echo "\
Usage: $0 [options]

Installs CORTX stack and configures cortx services either on VM environment.

Must be run from primary node for Dual node and from VM itself for single node.

General options:
$base_options_usage
Options:
       -S,  --singlenode           switch to single node mode setup
       --prereq-states             deploy only prereq states (components.misc_pkgs)
       --system-states             deploy only system states
"
}


function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            ;;
        --system-states)
            run_system_states=true
            run_all=false
            ;;
        --prereq-states)
            run_prereq_states=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function run_states {
    local states=${@}

    # apply states
    for state in ${states[@]}; do
        $cmd salt "*" state.apply components.$state
    done
}

function update_salt {
    # Refresh salt pillar data
    l_info "Updating Salt data"
    $cmd salt "*" saltutil.sync_all $salt_opts
    $cmd salt "*" saltutil.refresh_pillar $salt_opts
    $cmd salt "*" saltutil.refresh_grains $salt_opts
}

function encrypt_pillar {
    # Encrypt passwords in pillar data
    l_info "Encrypting salt pillar data"
    python3 ${BASEDIR}/pillar_encrypt
    update_salt
}

parse_args 'S' 'singlenode,prereq-states,iopath-states,system-states' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
salt_opts_dry_run=
if [[ "$dry_run" == true ]]; then
    salt_opts_dry_run="test=True"
fi
salt_opts="--no-color --out-file=$LOG_FILE --out-file-append $salt_opts_dry_run --timeout=600"

if [[ "$run_all" == true ]]; then
    run_states "${system_states[@]}"
    #encrypt_pillar

    run_states "${prereq_states[@]}"
fi

if [[ "$run_system_states" == true ]]; then
    l_info "Deploying the system states"
    run_states "${system_states[@]}"
    #encrypt_pillar
fi

if [[ "$run_prereq_states" == true ]]; then
    l_info "Deploying the prereq states"
    run_states "${prereq_states[@]}"
fi

l_info "***** SUCCESS! *****"
l_info "The detailed logs can be seen at: $LOG_FILE"
l_info "Done"
