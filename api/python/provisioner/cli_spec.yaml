#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

# Format notes:
#   - higher level keys - for groupping only
#   - lowest level dictionaries will be passed
#     to argparse's add_argument (like **kwargs)
#   - a shorthand for a help-only spec is available:
#           <spec_name>: <help string>
#       is an equivalent for
#           <spec_name>:
#              help: <help string>

repos:
  cortx: path/url to a CORTX distribution
  dist_type:
    help: the type of the distribution
    choices: __py__:provisioner.config.DistrType
  deps: path/url to a CORTX 3rd parties distribution
  os: path/url to a CORTX OS distribution
  py_index: >-
    consider a custom python index inside CORTX distribution
    (for bundle distribution only)
upgrade:
  level:
    help: configuration level
    choices: __py__:provisioner.config.ConfigLevelT
  iteration: upgrade round number
  old_version: old version number
  new_version: new version number
consul:
    server: This flag is used to control if an agent is in server or client mode
    bind_addr:
      help: The address that should be bound to for internal Consul cluster communications
      metavar: ipv4
    retry_join:
      help: Consul server for retry-join at start
      nargs: '*'
      metavar: ipv4
    version: Consul version to setup
    bootstrap_expect:
      help: the number of expected servers in the Consul datacenter
      metavar: number
salt_master:
  lvm2_first: >-
    install lvm2 before saltstack (workaround for GlusterFS in-docker setups)
  updated_keys: list of minion ids which keys have been changed
  onchanges:
    help: action on salt-master configuration changes
    choices: ['restart', 'nothing']
salt_minion:
  masters: list of salt-master hosts
  cluster_uuid:
    help: Cluster UUID
    nargs: '+'
    metavar: uuid
  onchanges:
    help: action on salt-minion configuration changes
    choices: ['restart', 'stop', 'nothing']
  rediscover: fetch host system information and connections
salt_cluster:
  regen_keys: re-generate old keys
glusterfs:
  peers:
    help: gluster peer host (IP/domain)
    nargs: +
  in_docker: configure Dockerized glusterfs servers
  add_repo: configure glusterfs 3rd party repo
  cleanup: clean up the current configuration
roster:
  nodes:
    help: "cluster node specification, format: id:[user@]hostname[:port]"
    nargs: +
    metavar: NODESPEC
  path: path to roster file
pillar:
  release_type:
    help: release type
    choices: ['bundle', 'internal']
  release_deps_bundle_url: 3rd party dependencies repo url/path
  release_target_build: release type
  service_user_password: >-
    a password for the CORTX service user, a special value __GENERATE__
    might be used to generate a new one on the fly
setup:
  ha: turn on high availability mode
  salt_master: domain name or IP of the salt-master
  vendored: The flag to use setup logic from a vendor
