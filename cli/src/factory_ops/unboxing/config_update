#!/bin/sh

# Functions in this file address following:
#   1. Updates /root/.ssh/config file 
#   2. Update cluster.sls with hostnames obtained for node-1 and node-2 
#   3. Update /etc/salt/minion for hostname
#   4. Start rabbitmq cluster   <= Currently handled in init
set -euE

BASEDIR=$(dirname "${BASH_SOURCE}")

. ${BASEDIR}/../utils
. ${BASEDIR}/../../functions.sh

export PRVSNR_ROOT="/opt/seagate/eos-prvsnr"
export LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/unboxing_config_update.log}"
truncate -s 0 ${LOG_FILE}

# export private_data_ip_node_1=$(grep -m1 -A8 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|grep "pvt_ip_addr"|tail -n1|cut -d':' -f2|tr -d "[:space:]")
# export private_data_ip_node_2=$(grep -m2 -A8 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|grep "pvt_ip_addr"|tail -n1|cut -d':' -f2|tr -d "[:space:]")
export private_data_ip_node_1=$(get_pillar_data cluster:srvnode-1:network:data_nw:pvt_ip_addr)
export private_data_ip_node_2=$(get_pillar_data cluster:srvnode-2:network:data_nw:pvt_ip_addr)

function trap_handler {
  echo "For detailed error logs, please see: $LOG_FILE"
}
trap trap_handler ERR

function update_ssh_config {
    if [[ "srvnode-1" == $(cat /etc/salt/minion_id) ]]; then
        echo "Updating localhost in /root/.ssh/config on primary node"|tee -a ${LOG_FILE}
        # Replace node-1 entry
        local primary_host=$(hostname)
        # echo ${primary_host}
        local line_to_replace=$(grep -m1 -noP "HostName" /root/.ssh/config|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "s|Host srvnode-1.*|Host srvnode-1 ${primary_host}|" /root/.ssh/config
        sed -i "${line_to_replace}s|HostName.*|HostName ${primary_host}|" /root/.ssh/config
        echo "Updated localhost in /root/.ssh/config on primary node"|tee -a ${LOG_FILE}

        # Replace node-2 entry
        echo "Updating remote host in /root/.ssh/config on primary node"|tee -a ${LOG_FILE}
        local secondary_host=$(ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "hostname")
        # echo ${secondary_host}
        local line_to_replace=$(grep -m2 -noP "HostName" /root/.ssh/config|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "s|Host srvnode-2.*|Host srvnode-2 ${secondary_host}|" /root/.ssh/config
        sed -i "${line_to_replace}s|HostName.*|HostName ${secondary_host}|" /root/.ssh/config
        echo "Updated remote host in /root/.ssh/config on primary node"|tee -a ${LOG_FILE}
    else
        echo "Updating localhost in /root/.ssh/config on secondary node"|tee -a ${LOG_FILE}
        # Replace node-1 entry
        local primary_host=$(ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_1} "hostname")
        # echo ${primary_host}
        local line_to_replace=$(grep -m1 -noP "HostName" /root/.ssh/config|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "s|Host srvnode-1.*|Host srvnode-1 ${primary_host}|" /root/.ssh/config
        sed -i "${line_to_replace}s|HostName.*|HostName ${primary_host}|" /root/.ssh/config
        echo "Updated localhost in /root/.ssh/config on secondary node"|tee -a ${LOG_FILE}

        # Replace node-2 entry
        echo "Updating remote host in /root/.ssh/config on secondary node"|tee -a ${LOG_FILE}
        local secondary_host=$(hostname)
        # echo ${secondary_host}
        local line_to_replace=$(grep -m2 -noP "HostName" /root/.ssh/config|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "s|Host srvnode-2.*|Host srvnode-2 ${secondary_host}|" /root/.ssh/config
        sed -i "${line_to_replace}s|HostName.*|HostName ${secondary_host}|" /root/.ssh/config
        echo "Updated remote host in /root/.ssh/config on secondary node"|tee -a ${LOG_FILE}
    fi
}

function update_salt_minion {

    if [[ "srvnode-1" == $(cat /etc/salt/minion_id) ]]; then
        local host=$(hostname)
        local line_to_replace=$(grep -m1 -noP "master: " /etc/salt/minion|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        
        echo "Updated master in /etc/salt/minion on primary node"|tee -a ${LOG_FILE}
        sed -i "${line_to_replace}s|^master:.*|master: ${host}|" /etc/salt/minion

        echo "Updating master in /etc/salt/minion on secondary node"|tee -a ${LOG_FILE}
        ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "sed -i \"${line_to_replace}s|^master:.*|master: ${host}|\" /etc/salt/minion"
        echo "Updated master in /etc/salt/minion on node"|tee -a ${LOG_FILE}
        
        # It's safe to restart service on both nodes
        echo "Restarting salt-minion on primary node"|tee -a ${LOG_FILE}
        systemctl restart salt-minion
        echo "Restarting salt-minion on secondary node"|tee -a ${LOG_FILE}
        ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "systemctl restart salt-minion"
        echo "Restarted salt-minion on nodes"|tee -a ${LOG_FILE}

        sleep 5

        salt-key -L
        salt-key -A -y

        sleep 5
    fi
}

function update_cluster_sls {
    local _cluster_sls_path=${PRVSNR_ROOT}/pillar/components/cluster.sls
    if [[ -f "${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls" ]]; then
        _cluster_sls_path=${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls
    fi

    if [[ "srvnode-1" == $(cat /etc/salt/minion_id) ]]; then
        echo "Updating cluster.sls for node-1 hostname on primary node"|tee -a ${LOG_FILE}
        # Replace node-1 entry
        # Hostname
        local primary_host=$(hostname)
        # echo ${primary_host}
        local line_to_replace=$(grep -m1 -n "srvnode-1:" ${_cluster_sls_path}|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "${line_to_replace},/hostname:*/ s|hostname:.*|hostname: ${primary_host}|" ${_cluster_sls_path}
        echo "Updated cluster.sls for node-1 hostname on primary node"|tee -a ${LOG_FILE}
        # BMC IP-address
        # grep -m1 -A10 -n "srvnode-1:" ${_cluster_sls_path}|grep -m1 -A3 "bmc"|grep -m1 "ip"|cut -d: -f2|tr -d [:space:]
        # sed -i "${line_to_replace},/ip:*/ s|ip:.*|ip: ${primary_host}|" ${_cluster_sls_path}
        # echo "Updated cluster.sls for node-1 hostname on primary node"|tee -a ${LOG_FILE}
        (hostnamectl status | grep Chassis | grep -q server) && {
            update_bmc_ip "srvnode-1"
        }

        # Replace node-2 entry
        # Hostname
        echo "Updating cluster.sls for node-2 hostname on primary node"|tee -a ${LOG_FILE}
        local secondary_host=$(ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "hostname")
        # echo ${secondary_host}
        local line_to_replace=$(grep -m1 -n "srvnode-2:" ${_cluster_sls_path}|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "${line_to_replace},/hostname:*/ s|hostname:.*|hostname: ${secondary_host}|" ${_cluster_sls_path}
        echo "Updated cluster.sls for node-2 hostname on primary node"|tee -a ${LOG_FILE}
        # BMC IP-address
        # grep -m1 -A10 -n "srvnode-2:" ${_cluster_sls_path}|grep -m1 -A3 "bmc"|grep -m1 "ip"|cut -d: -f2|tr -d [:space:]
        # sed -i "${line_to_replace},/ip:*/ s|ip:.*|ip: ${primary_host}|" ${_cluster_sls_path}
        # echo "Updated cluster.sls for node-1 hostname on primary node"|tee -a ${LOG_FILE}
        (hostnamectl status | grep Chassis | grep -q server) && {
            update_bmc_ip "srvnode-2" "srvnode-2"
        }

        echo "Refreshing salt pillar from primary node"|tee -a ${LOG_FILE}
        sleep 5
        salt "*" saltutil.refresh_pillar
        echo "Refreshed cluster.sls from primary node"|tee -a ${LOG_FILE}
    fi
}

function recover_rabbitmq_cluster {
    # # Update RabbitMQ cluster
    salt "srvnode-1" state.apply components.misc_pkgs.rabbitmq
    salt "srvnode-2" state.apply components.misc_pkgs.rabbitmq

    # # Update SSPL init
    salt "*" state.apply components.s3server.config
    salt "*" state.apply components.sspl.config
    salt "*" state.apply components.csm.config
}

function remove_boxing_flag {
    if [[ -f '/opt/seagate/cortx/provisioner/generated_config/boxed' ]]
    then
        echo "INFO: Boxed file found. Removing boxed file." | tee ${LOG_FILE}
        rm -f /opt/seagate/cortx/provisioner/generated_config/boxed
    else
        echo "ERROR: Boxed file not found. Cannot initiate unboxing sequence." | tee ${LOG_FILE}
        exit 1
    fi
}
