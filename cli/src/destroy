#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#



set -euE

trap trap_handler ERR

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/destroy.log}"
export LOG_FILE

. $BASEDIR/common_utils/functions.sh

l_info "***** Running $0 *****" 

function trap_handler {
  echo "For more details see $LOG_FILE"
} 

run_all=true
run_ha_states=false
io_states=false
ctrlpath_states=false
remove_prereqs=false
remove_system=false
remove_prvsnr=false
tgt_node=srvnode-2

controlpath_states=(
# states to be applied in desired sequence
    "ha.ctrlstack-ha.teardown"
    "csm.teardown"
    "uds.teardown"
    "sspl.teardown"
)

ha_states=(
    "ha.iostack-ha.teardown"
    "ha.cortx-ha.ha_cleanup"
    "ha.cortx-ha.teardown"
    "ha.corosync-pacemaker.teardown"
    "hare.teardown"
)

iopath_states=(
# states to be applied in desired sequence
    "s3server.teardown"
    "motr.teardown"
    "misc_pkgs.lustre.teardown"
)

prereq_states=(
    # states to be applied in desired sequence
    "misc_pkgs.statsd.teardown"
    "misc_pkgs.kibana.teardown"
    "misc_pkgs.elasticsearch.teardown"
    "misc_pkgs.nodejs.teardown"
    "misc_pkgs.rabbitmq.teardown"
    "misc_pkgs.openldap.teardown"
    "misc_pkgs.consul.teardown"
    "ha.haproxy.teardown"
    "misc_pkgs.ssl_certs.teardown"
)

system_states=(
    # states to be applied in desired sequence
    "system.chrony.teardown"
    "system.logrotate.teardown"
    "system.firewall.teardown"
    "misc_pkgs.rsyslog.teardown"
    "system.storage.teardown"
    "system.storage.multipath.teardown"
    "system.teardown"
)

function usage {
  echo "\
Usage: $0 [options]

Removes CORTX stack and cleanups cortx dependencies either on remote host or locally.

Target host is considered to be an CORTX salt-master.

General options:
$base_options_usage
Options:
    -S <tgt_node>,  --singlenode=tgt_node       switch to single node mode setup
    
    --ha-states                                 run only teardown of ha components
    --iopath-states                             run only teardown of iopath components
    --ctrlpath-states                           run only teardown of control path components
    --remove-prvsnr                             run teardown to remove cortx-prvsnr, cortx-prvsnr-cli
                                                    python36-cortx-prvsnr and related dependencies.
    --prereq-states                             run only teardown of prerequisite components
    --system-states                             run only teardown of system components
"
}

function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            tgt_node="$2"
            shift
            ;;
        --ha-states)
            run_ha_states=true
            run_all=false
            ;;
        --iopath-states)
            io_states=true
            run_all=false
            ;;
        --ctrlpath-states)
            ctrlpath_states=true
            run_all=false
            ;;
        --prereq-states)
            remove_prereqs=true
            run_all=false
            ;;
        --system-states)
            remove_system=true
            run_all=false
            ;;
        --remove-prvsnr)
            remove_prvsnr=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function teardown_states {
    local states=${@}

    # apply states
    if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
        for state in ${states[@]}; do
            l_info "Removing $state from node: "$tgt_node""
            $cmd salt "$tgt_node" state.apply components.$state $salt_opts
            sleep 2     # Mindfulness break
        done
    else
        for state in ${states[@]}; do
            if [[ "$state" == "ha.iostack-ha" ]]; then
                
                l_info "Installing cortx-ha on both nodes"
                $cmd salt "*" state.apply components.ha.cortx-ha.prepare  $salt_opts || true
                $cmd salt "*" state.apply components.ha.cortx-ha.install  $salt_opts || true
                sleep 2     # Mindfulness break

                l_info "Removing $state from srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts || true
                sleep 2     # Mindfulness break
                l_info "Removing $state from srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state  $salt_opts || true
                sleep 2     # Mindfulness break

                l_info "Removing cortx-ha on both nodes"
                $cmd salt "*" state.apply components.ha.cortx-ha.teardown  $salt_opts || true
                sleep 2     # Mindfulness break

            elif [[ "$state" == "ha.corosync-pacemaker"
                || "$state" == "sspl" ]]; then

                l_info "Removing $state from srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts || true
                sleep 2     # Mindfulness break
                l_info "Removing $state from srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state  $salt_opts || true
                sleep 2     # Mindfulness break
            
            elif [[ "$state" == "misc_pkgs.openldap"
                || "$state" == "misc_pkgs.rabbitmq"
                || "$state" == "system.storage.multipath" ]]; then
                
                l_info "Removing $state from srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state  $salt_opts || true
                sleep 2     # Mindfulness break
                l_info "Removing $state from srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts || true
                sleep 2     # Mindfulness break
            
            else
            
                l_info "Removing $state from both nodes"
                $cmd salt '*' state.apply components.$state $salt_opts || true
                sleep 2     # Mindfulness break
            fi
        done
    fi
}

# Ensure the cluster is in maintenance mode before teardown
function ensure_cluster_in_maintenance {
    if command -v hctl && command -v hctl ; then
        # echo "INFO: Putting Cortx cluster in maintenance mode..." 2>&1 | tee -a ${LOG_FILE}
        # hctl node maintenance --all --timeout-sec=600 2>&1 | tee -a ${LOG_FILE} || true
        echo "INFO: Disabling stonith resources to avoid surprises..." 2>&1 | tee -a ${LOG_FILE}
        pcs resource disable stonith-c1 stonith-c2
    else
        echo "[WARN     ]: Command 'pcs' not found, cannot put cluster into maintenance mode." 2>&1 | tee -a ${LOG_FILE}
    fi
}

parse_args 'S:' 'singlenode:,ha-states,iopath-states,ctrlpath-states,remove-prvsnr,prereq-states,system-states' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
salt_opts_dry_run=
if [[ "$dry_run" == true ]]; then
    salt_opts_dry_run="test=True"
fi
salt_opts="--no-color --out-file=$LOG_FILE --out-file-append $salt_opts_dry_run"

if [[ "$run_all" == true ]]; then
    ensure_cluster_in_maintenance

    teardown_states "${controlpath_states[@]}"
    teardown_states "${ha_states[@]}"
    teardown_states "${iopath_states[@]}"
    teardown_states "${prereq_states[@]}"
    teardown_states "${system_states[@]}"
fi

if [[ "$ctrlpath_states" == true ]]; then
    ensure_cluster_in_maintenance

    l_info "Removing the control path group packages"
    teardown_states "${controlpath_states[@]}"
fi

if [[ "$run_ha_states" == true ]]; then
    ensure_cluster_in_maintenance
    
    l_info "Removing the HA group packages"
    teardown_states "${ha_states[@]}"
fi

if [[ "$io_states" == true ]]; then
    l_info "Removing the IO path group packages"
    teardown_states  "${iopath_states[@]}"
fi

if [[ "$remove_prereqs" == true ]]; then
    l_info "Removing the third party group packages"
    teardown_states  "${prereq_states[@]}"
fi

if [[ "$remove_system" == true ]]; then
    l_info "Unconfiguring the settings from System group states"
    teardown_states  "${system_states[@]}"
fi

if [[ "$run_all" == true || "$run_ha_states" == true ]]; then
    l_info "Cleaning up the failed-services on both nodes"
    salt '*' cmd.run "systemctl reset-failed" $salt_opts

    if [[ $(systemctl list-units --state=running | grep hare-consul-agent) ]]; then 
        salt '*' service.stop hare-consul-agent
    fi
fi

if [[ "$remove_prvsnr" == true ]]; then
    l_info "Cleaning up Provisioner"

    l_info "Removing prvsnr api logs configuration from node-1"
    rm -rf /etc/rsyslog.d/prvsnrfwd.conf || true
    rm -rf /etc/rsyslog.d/2-prvsnrfwd.conf || true

    l_info "Removing cortx packages from node-2"
    ssh srvnode-2 'for pkg in `rpm -qa | grep cortx || true`; do\
        echo "INFO: Removing ${pkg}"; yum -q remove -y ${pkg}; done'
    l_info "Unmounting sw_update mounts if any from node-2"
    ssh srvnode-2 'for build_mount in `findmnt -l --output=target | grep "/opt/seagate/cortx/updates" || true`; do\
        umount $build_mount; done'

    l_info "Removing cortx packages from node-1"
    for pkg in `rpm -qa | grep cortx || true`; do
        l_info "INFO: Removing ${pkg}"; yum -q remove -y ${pkg}
    done
    l_info "Unmounting sw_update mounts if any from node-1"
    for build_mount in `findmnt -l --output=target | grep "/opt/seagate/cortx/updates" || true`; do
        umount ${build_mount}
    done

    l_info "Removing salt packages from node-2"
    ssh srvnode-2 "yum remove -y salt* || true; rm -rf /etc/salt; rm -rf /var/cache/salt; pkill -9 salt"

    l_info "Removing salt packages from node-1"
    yum remove -y salt* || true
    rm -rf /etc/salt; rm -rf /var/cache/salt; pkill -9 salt

    l_info "Removing /opt/seagate directory from node-1"
    rm -rf /opt/seagate; rm -rf /root/.ssh/*
fi

l_info "***** SUCCESS! *****"
l_info "The detailed logs can be seen at: $LOG_FILE"
l_info "Done"
