#!/usr/bin/python3

# Copyright (c) 2022 Seagate Technology LLC and/or its Affiliates
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

import os
import sys
import errno
import traceback
import socket
import subprocess
from subprocess import Popen, PIPE

from cortx.utils.log import Log
from cortx.utils.cmd_framework import Cmd
from cortx.utils.conf_store import Conf, MappedConf

class SetupCmdBase(Cmd):
    """Setup cmd base class."""

    def __init__(self, args):
        """Initialize super class members."""
        super().__init__(args)
        SUPPORTED_SERVICE_NAMES = ['all']
        service = args.services
        if service not in SUPPORTED_SERVICE_NAMES:
            raise Exception(f'provided Service name {service} is not supported !!! \
                Supported service names are {SUPPORTED_SERVICE_NAMES}.')
        config_url = args.config
        self._conf = MappedConf(config_url)

    def add_args(parser):
        parser.add_argument('--services', default='all', help='services')
        parser.add_argument('-c', '--config', default='config_url', help='config')

    def _initialize_logging(self, conf: MappedConf):
        """Initialize Logging."""
        log_path = conf.get('config>common>storage>log')
        if log_path is None:
            raise Exception('Log path is None.')
        log_path = os.path.join(log_path, 'monitor', Conf.machine_id)
        os.makedirs(log_path, exist_ok=True)
        Log.init('monitor_setup', log_path, console_output=True, console_output_level='INFO', level='INFO')


class PostInstallCmd(SetupCmdBase):
    """PostInstall Setup Cmd."""

    name = 'post_install'

    def __init__(self, args: dict):
        """Initialize super class members."""
        super().__init__(args)

    def process(self):
        self._initialize_logging(self._conf)
        Log.info(f'successfully executed post_install phase')
        return 0


class PrepareCmd(SetupCmdBase):
    """Prepare Setup Cmd."""
    name = 'prepare'

    def __init__(self, args: dict):
        """Initialize super class members."""
        super().__init__(args)

    def process(self):
        self._initialize_logging(self._conf)
        Log.info(f'successfully executed prepare phase')
        return 0


class ConfigCmd(SetupCmdBase):
    """Setup Config Cmd."""
    name = 'config'

    def __init__(self, args):
        """Initialize super class members."""
        super().__init__(args)

    def process(self):
        self._initialize_logging(self._conf)
        Log.info(f'successfully executed config phase')
        return 0


class InitCmd(SetupCmdBase):
    """Init Setup Cmd."""
    name = 'init'

    def __init__(self, args):
        """Initialize super class members."""
        super().__init__(args)

    def process(self):
        self._initialize_logging(self._conf)
        Log.info(f'successfully executed init phase')
        return 0


def main():
    argv = sys.argv

    try:
        desc = "Monitor Setup command"
        command = Cmd.get_command(sys.modules[__name__], desc, argv[1:])
        rc = command.process()

    except Exception as e:
        sys.stderr.write("error: %s\n\n" % str(e))
        sys.stderr.write("%s\n" % traceback.format_exc())
        Log.error(f'Command {argv[1]} failed :{str(e)}')
        rc = e.rc()

    except Exception as e:
        sys.stderr.write("error: %s\n\n" % str(e))
        sys.stderr.write("%s\n" % traceback.format_exc())
        Log.error(f'Command {argv[1]} failed :{str(e)}')
        rc = errno.EINVAL

    Log.info(f"Command {argv[1]} completed with rc:{rc}")
    return rc


if __name__ == '__main__':
    sys.exit(main())
