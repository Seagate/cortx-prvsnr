#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


{% set num_of_nodes = pillar['provisioner']['cluster_info']['num_of_nodes'] | int -%}
cluster:
  cluster_id: {{ grains["cluster_id"] }}
  storage_sets:
    {% for set_id in range(0, num_of_nodes, 3) %}
    storage-set-{{  (set_id//3) + 1 }}:
      {% for num in range(set_id, set_id+3) %}
      {% if num < num_of_nodes %}
      - srvnode-{{ (num + 1) }}
      {% endif %}
      {% endfor %}
    {% endfor %}
  search_domains:                     # Do not update
  dns_servers:                        # Do not update
  server_nodes:
    {% for num in range(num_of_nodes) %}
    {% set node = 'srvnode-' + (num + 1)|string %}
    {{ salt['mine.get'](node , 'node_machine_id')[node] }} : {{ node }}
    {% endfor %}
  {% for num in range(num_of_nodes) %}
  {% set node = 'srvnode-' + (num + 1)|string %}
  srvnode-{{ (num + 1) }}:
    rack_id:
    site_id:
    storage_set_id: storage-set-{{  (num//3) + 1 }}
    node_id:
    machine_id: {{ salt['mine.get'](node , 'node_machine_id')[node] }}
    hostname: srvnode-{{ (num + 1) }}
    node_type: {{ "HW" if "physical" in grains["virtual"] else "VM" }}
    roles:
      {% if 0 == num %}
      - primary
      {% else %}
      - secondary
      {% endif %}
      {% if 0 == (num % 3) %}
      - openldap_server
      - kafka_server
      {% else %}
      - openldap_client
      {% endif %}
    {% if 0 == num %}
    is_primary: True
    {% else %}
    is_primary: False
    {% endif %}
    bmc:
      ip:
      user: ADMIN
      secret:
    network:
      mgmt:                           # Management network interfaces
        interfaces:
          - eth0
        public_ip:                    # DHCP is assumed if left blank
        public_fqdn: srvnode-{{ (num + 1) }}.mgmt.public
        netmask:
        gateway:                      # Gateway IP of Management Network. Not required for DHCP.
        mtu: 1500
      data:                           # Data network interfaces
        public_interfaces:
          - eth1                      # Public Data
        private_interfaces:
          - eth2                      # Private Data (direct connect)
        interface_type: tcp           # tcp/o2ib
        transport_type: lnet          # lnet/libfabric
        public_ip:                    # DHCP is assumed if left blank
        public_fqdn: srvnode-{{ (num + 1) }}.data.public
        private_ip:                   # Fixed IP of Private Data Network
        private_fqdn: srvnode-{{ (num + 1) }}.data.private
        netmask:
        gateway:                      # Gateway IP of Public Data Network. Not required for DHCP.
        mtu: {% if "physical" in grains["virtual"] %} 9000 {% else %} 1500 {% endif %}
        roaming_ip:                   # Applies to private data network
    storage:
      enclosure_id: enclosure-{{ (num + 1) }}
      metadata_devices:               # Device for /var/motr and possibly SWAP
        - /dev/sdb                    # Auto-populated by components.system.storage.multipath
      data_devices:                   # Data device/LUN from storage enclosure
        - /dev/sdc
    {% if "physical" in grains["virtual"] %}
    s3_instances: 11
    {% else %}
    s3_instances: 1
    {% endif %}
  {% endfor %}
