#!/usr/bin/env python3
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


import argparse
import logging
import os
import shutil
import sys
import tarfile
import distutils.dir_util

logging.basicConfig(
        datefmt='%m/%d/%Y %I:%M:%S %p %z',
        filename="/var/log/seagate/provisioner/provisioner-bundler.log",
        filemode='w',
        format="[%(levelname)s - %(asctime)s]: %(message)s",
        level=logging.ERROR
    )   


def __cleanup_directory(directory):
    """
    Clean contents of directory.
    """
    for file_elem in os.listdir(directory):
        cleanup_file_elem = os.path.join(directory, file_elem)
        try:
            if os.path.isfile(cleanup_file_elem):
                os.remove(cleanup_file_elem)
            elif os.path.isdir(cleanup_file_elem):
                shutil.rmtree(cleanup_file_elem)
        except Exception as e:
            logging.exception(e)
            sys.exit(1)


def parse_args():
    parser = argparse.ArgumentParser(description='''Bundle provisioner logs ''')
    parser.add_argument('bundle_id', help='Unique bundle id')
    parser.add_argument('path', help='Path to store the created bundle', nargs='?', default="/var/seagate/cortx/support_bundle/")
    args=parser.parse_args()
    return args


def prepare_target_file(bundle_id, dest_path):
    """
    Prepares location for tar file
    """
    try:
        component = "provisioner"
        target_path=os.path.join(dest_path, component)
        logging.info(target_path)
        os.makedirs(target_path, exist_ok=True)

        # remove old entries if path already exists
        __cleanup_directory(target_path)
        # collect_prvsnr_logs(target_path)
        target_file = os.path.join(target_path, component + '_' + bundle_id + '.tar.gz')
        
        return target_file
    except Exception as e:
        logging.exception(e)
        sys.exit(1)


def collect_prvsnr_logs(target_path):
    """
    Collect provisioner logs for Support Bundle.
        - /var/log/salt/
        - /var/log/seagate/provisioner/
    """
    for log_path in (
        "/var/log/salt",
        "/var/log/seagate/provisioner"
    ):
        distutils.dir_util.copy_tree(
            src = log_path,
            dst = target_path
        )


def make_tarfile(output_filename):
    """
    Create a tar bundle.
    """
    try:
        with tarfile.open(output_filename, "w:gz") as tar:
            for log_path in (
                "/var/log/salt",
                "/var/log/seagate/provisioner"
            ):
                tar.add(log_path, arcname=os.path.basename(log_path))
    except Exception as e:
        logging.exception(e)
        sys.exit(1)


if __name__ == "__main__":
    try:
        args = parse_args()
        target_file = prepare_target_file(args.bundle_id, args.path)
        make_tarfile(target_file)
    except KeyboardInterrupt as e:
        print("\n\nWARNING: User aborted command. Partial data save/corruption might occur. It is advised to re-run the command.")
        sys.exit(1)
