#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#



set -euE


BASEDIR=$(dirname "${BASH_SOURCE}")

LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/deploy.log}"
export LOG_FILE

. $BASEDIR/common_utils/functions.sh

l_info "***** Running $0 *****" 

function trap_handler {
    echo "***** FAILED!! *****"
    echo "For detailed error logs, please see: $LOG_FILE"
}
trap trap_handler ERR

run_all=true
run_system_states=false
run_prereq_states=false
run_sync_states=false
run_io_states=false
run_ha_states=false
run_ctrlpath_states=false
tgt_node=srvnode-2

system_states=(
    # states to be applied in desired sequence
        "system"
        "system.network"
        "system.network.data.direct"
        "misc_pkgs.rsyslog"
        "system.firewall"
        "system.logrotate"
        "system.chrony"
    )

prereq_states=(
    # states to be applied in desired sequence
        "misc_pkgs.rhel_sos"
        "misc_pkgs.ssl_certs"
        "ha.haproxy"
        "misc_pkgs.openldap"
        "misc_pkgs.rabbitmq"
        "misc_pkgs.nodejs"
        "misc_pkgs.elasticsearch"
        "misc_pkgs.kibana"
        "misc_pkgs.statsd"
    )

sync_states=(
    # states to be applied in desired sequence
        "sync.software.openldap"
        "sync.software.rabbitmq"
    )

iopath_states=(
    # states to be applied in desired sequence
        "misc_pkgs.lustre"
        "motr.prepare"
        "motr.install"
        "hare.prepare"
        "hare.install"
        "s3server.prepare"
        "s3server.install"
    )

controlpath_states=(
    # states to be applied in desired sequence
        "sspl.prepare"
        "sspl.install"
        "csm.prepare"
        "csm.install"
        "csm.config"
        "uds.prepare"
        "uds.install"
    )

ha_states=(
    # states to be applied in desired sequence
        "ha.corosync-pacemaker.prepare"
        "ha.corosync-pacemaker.install"
        "ha.corosync-pacemaker.config.base"
        "ha.cortx-ha.prepare"
        "ha.cortx-ha.install"
        "ha.ees_ha.prepare"
        "ha.ees_ha.install"             # A blank file
        "ha.cortx-ha.replace_node.refresh_context"
        "ha.cortx-ha.replace_node.add_node"
    )

# ToDo: Remove & Add node script here

function usage {
  echo "\
Usage: $0 [options]

Installs CORTX stack and configures cortx services either on remote host or locally.

Target host is considered to be an cortx SaltStack master.

General options:
$base_options_usage
Options:
    -S <tgt_node>,  --singlenode=<tgt_node>      switch to single node mode setup
    --system-states                              deploy only system states
    --prereq-states                              deploy only prereq states (components.misc_pkgs)
    --sync-states                                deploy only the software synchronization
    --iopath-states                              deploy only iopath states (motr, s3server & Hare)
    --ha-states                                  deploy only ha states (corosync-pacemaker, ees_ha)
    --ctrlpath-states                            deploy only control path states (sspl & csm)
"
}


function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            tgt_node="$2"
            shift
            ;;
        --system-states)
            run_system_states=true
            run_all=false
            ;;
        --prereq-states)
            run_prereq_states=true
            run_all=false
            ;;
        --sync-states)
            run_sync_states=true
            run_all=false
            ;;
        --iopath-states)
            run_io_states=true
            run_all=false
            ;;
        --ha-states)
            run_ha_states=true
            run_all=false
            ;;
        --ctrlpath-states)
            run_ctrlpath_states=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function run_states {
    local states=${@}

    # apply states
    if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
        for state in ${states[@]}; do
            l_info "Applying 'components.$state' on node: $tgt_node"
            $cmd salt "$tgt_node" state.apply components.$state $salt_opts
            sleep 2     # Mindfulness break
        done
    fi
}

function update_salt {
    # Refresh salt pillar data
    l_info "Updating Salt data"
    l_info "Syncing states"
    $cmd salt "*" saltutil.sync_all $salt_opts
    sleep 2
    l_info "Refreshing pillars"
    sleep 2
    $cmd salt "*" saltutil.refresh_pillar $salt_opts
    l_info "Refreshing grains"
    sleep 2
    $cmd salt "*" saltutil.refresh_grains $salt_opts
    sleep 2
}

function encrypt_pillar {
    # Encrypt passwords in pillar data
    l_info "Encrypting salt pillar data"
    python3 ${BASEDIR}/pillar_encrypt
    update_salt
}

parse_args 'S' 'singlenode:,prereq-states,sync-states,iopath-states,ha-states,ctrlpath-states,system-states' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
salt_opts_dry_run=
if [[ "$dry_run" == true ]]; then
    salt_opts_dry_run="test=True"
fi
salt_opts="--no-color --out-file=$LOG_FILE --out-file-append $salt_opts_dry_run --timeout=600"

update_salt

if [[ "$run_all" == true ]]; then

    run_states ( "ha.cortx-ha.replace_node.remove_node" )

    salt "*" cmd.run "rescan-scsi-bus.sh || true" $salt_opts
    run_states "${system_states[@]}"
    encrypt_pillar

    run_states "${prereq_states[@]}"
    run_states "${sync_states[@]}"
    run_states "${iopath_states[@]}"
    run_states "${controlpath_states[@]}"
    run_states "${ha_states[@]}"
fi

if [[ "$run_system_states" == true ]]; then
    l_info "Deploying the system states"
    salt "*" cmd.run "rescan-scsi-bus.sh || true" $salt_opts
    run_states "${system_states[@]}"
    encrypt_pillar
fi

if [[ "$run_prereq_states" == true ]]; then
    l_info "Deploying the prereq states"
    run_states  "${prereq_states[@]}"
fi

if [[ "$run_sync_states" == true ]]; then
    l_info "Deploying the sync states"
    run_states  "${sync_states[@]}"
fi

if [[ "$run_io_states" == true || "$run_ha_states" == true ]]; then
    l_info "Recreating the metadata partitions"
    salt '*' state.apply components.system.storage $salt_opts
fi

if [[ "$run_io_states" == true ]]; then
    l_info "Deploying the io path states"
    run_states  "${iopath_states[@]}"
fi

if [[ "$run_ha_states" == true ]]; then
    l_info "Deploying the ha states"
    run_states "${ha_states[@]}"
fi

if [[ "$run_ctrlpath_states" == true ]]; then
    l_info "Deploying the control path states"
    run_states "${controlpath_states[@]}"
fi

l_info "Backing up pillar files to user space."
# mkdir -p /opt/seagate/cortx/provisioner/pillar/user/groups/all
# cp -r /opt/seagate/cortx/provisioner/pillar/components/*.sls /opt/seagate/cortx/provisioner/pillar/user/groups/all/
# chown -R :prvsnrusers /opt/seagate/cortx/provisioner/pillar/user
# chmod -R 664 /opt/seagate/cortx/provisioner/pillar/user/groups/all/*.sls

l_info "***** SUCCESS! *****"
l_info "The detailed logs can be seen at: $LOG_FILE"
l_info "Done"
