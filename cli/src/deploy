#!/bin/bash

set -euE

trap trap_handler ERR

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/deploy.log}"
export LOG_FILE

. $BASEDIR/common_utils/functions.sh

l_info "***** Running $0 *****" 

function trap_handler {
    echo "***** FAILED!! *****"
    echo "For detailed error logs, please see: $LOG_FILE"
}

run_all=true
run_system_states=false
run_prereq_states=false
run_io_states=false
run_ha_states=false
run_ctrlpath_states=false

system_states=(
    # states to be applied in desired sequence
        "system"
        "system.storage.multipath"
        "system.storage"
        "system.network"
        "system.network.data.direct"
        "misc_pkgs.rsyslog"
        "system.firewall"
        "system.logrotate"
        "system.chrony"
    )

prereq_states=(
    # states to be applied in desired sequence
        "misc_pkgs.rhel_sos"
        "misc_pkgs.ssl_certs"
        "ha.haproxy"
        "misc_pkgs.openldap"
        "misc_pkgs.rabbitmq"
        "misc_pkgs.nodejs"
        "misc_pkgs.elasticsearch"
        "misc_pkgs.kibana"
        "misc_pkgs.statsd"
    )

iopath_states=(
    # states to be applied in desired sequence
        "misc_pkgs.lustre"
        "cortx-motr"
        "s3server"
    )

ha_states=(
    # states to be applied in desired sequence
        "ha.corosync-pacemaker"
        "hare"
        "ha.ees_ha"
    )

controlpath_states=(
    # states to be applied in desired sequence
        "sspl"
        "csm"
        "uds"
        "post_setup"
        "ha.cortx-ha"
    )

function usage {
  echo "\
Usage: $0 [options]

Installs CORTX stack and configures cortx services either on remote host or locally.

Target host is considered to be an cortx SaltStack master.

General options:
$base_options_usage
Options:
       -S,  --singlenode           switch to single node mode setup
       --prereq-states             deploy only prereq states (components.misc_pkgs)
       --iopath-states             deploy only iopath states (cortx-motr, s3server & Hare)
       --ha-states                 deploy only ha states (corosync-pacemaker, ees_ha)
       --ctrlpath-states           deploy only control path states (sspl & csm)
       --system-states             deploy only system states
"
}


function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            ;;
        --system-states)
            run_system_states=true
            run_all=false
            ;;
        --prereq-states)
            run_prereq_states=true
            run_all=false
            ;;
        --iopath-states)
            run_io_states=true
            run_all=false
            ;;
        --ha-states)
            run_ha_states=true
            run_all=false
            ;;
        --ctrlpath-states)
            run_ctrlpath_states=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function run_states {
    local states=${@}

    # apply states
    if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
        for state in ${states[@]}; do
            l_info "Applying 'components.$state'"
            $cmd salt srvnode-1 state.apply components.$state $salt_opts
            sleep 2     # Mindfulness break
        done
    else
        for state in ${states[@]}; do
            if [[ "$state" == "ha.corosync-pacemaker" 
                || "$state" == "system.storage" 
                || "$state" == "sspl"
                || "$state" == "csm"
                ]]; then
                # Execute first on srvnode-2 then on srvnode-1.
                l_info "Applying 'components.$state' for srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state' for srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            elif [[ "$state" == "misc_pkgs.openldap"
                || "$state" == "misc_pkgs.rabbitmq"
                || "$state" == "system.storage.multipath"
                ]]; then
                # Execute first on srvnode-1 then on srvnode-2.
                l_info "Applying 'components.$state' for srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state' for srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            else
                l_info "Applying 'components.$state' for both nodes"
                $cmd salt srvnode-[1,2] state.apply components.$state $salt_opts
                sleep 2     # Mindfulness break
            fi
        done
    fi
}

function update_salt {
    # Refresh salt pillar data
    l_info "Updating Salt data"
    l_info "Syncing states"
    $cmd salt "*" saltutil.sync_all $salt_opts
    sleep 2
    l_info "Refreshing pillars"
    sleep 2
    $cmd salt "*" saltutil.refresh_pillar $salt_opts
    l_info "Refreshing grains"
    sleep 2
    $cmd salt "*" saltutil.refresh_grains $salt_opts
    sleep 2
}

function encrypt_pillar {
    # Encrypt passwords in pillar data
    l_info "Encrypting salt pillar data"
    python3 /opt/seagate/cortx/provisioner/cli/pillar_encrypt
    update_salt
}

parse_args 'S' 'singlenode,prereq-states,iopath-states,ha-states,ctrlpath-states,system-states' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
salt_opts_dry_run=
if [[ "$dry_run" == true ]]; then
    salt_opts_dry_run="test=True"
fi
salt_opts="--no-color --out-file=$LOG_FILE --out-file-append $salt_opts_dry_run"

update_salt

if [[ "$run_all" == true ]]; then
    salt "*" cmd.run "rescan-scsi-bus.sh || true" $salt_opts
    run_states "${system_states[@]}"
    encrypt_pillar

    run_states "${prereq_states[@]}"
    run_states  "${iopath_states[@]}"
    run_states "${ha_states[@]}"
    run_states "${controlpath_states[@]}"
fi

if [[ "$run_system_states" == true ]]; then
    l_info "Deploying the system states"
    salt "*" cmd.run "rescan-scsi-bus.sh || true" $salt_opts
    run_states "${system_states[@]}"
    encrypt_pillar
fi

if [[ "$run_prereq_states" == true ]]; then
    l_info "Deploying the prereq states"
    run_states  "${prereq_states[@]}"
fi

if [[ "$run_io_states" == true || "$run_ha_states" == true ]]; then
    l_info "Recreating the metadata partitions"
    salt '*' state.apply components.system.storage $salt_opts
fi

if [[ "$run_io_states" == true ]]; then
    l_info "Deploying the io path states"
    run_states  "${iopath_states[@]}"
fi

if [[ "$run_ha_states" == true ]]; then
    l_info "Deploying the ha states"
    run_states "${ha_states[@]}"
fi

if [[ "$run_ctrlpath_states" == true ]]; then
    l_info "Deploying the control path states"
    run_states "${controlpath_states[@]}"
fi

l_info "Backing up pillar files to user space."
mkdir -p /opt/seagate/cortx/provisioner/pillar/user/groups/all
cp -r /opt/seagate/cortx/provisioner/pillar/components/*.sls /opt/seagate/cortx/provisioner/pillar/user/groups/all/
chown -R :prvsnrusers /opt/seagate/cortx/provisioner/pillar/user
chmod -R 664 /opt/seagate/cortx/provisioner/pillar/user/groups/all/*.sls

l_info "***** SUCCESS! *****"
l_info "The detailed logs can be seen at: $LOG_FILE"
l_info "Done"
