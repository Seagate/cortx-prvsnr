#!/bin/bash
set -eu

# TODO
# - dry-run support

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")

show_file=false
component=
file_path=
load_default=false


. $BASEDIR/common_utils/functions.sh

function usage {
  echo "\
Usage: Usage: $0 [options] component

Configures cortx services either on remote host or locally.

'component' is one of {cluster,cortx-motr,haproxy,release,s3client,s3server,sspl}.

Target host is considered to be an CORTX SaltStack master.

General options:
$base_options_usage

Options:
  -f,  --file FILE                      update component pillar data using FILE as a source,
                                         default: not set
  -p,  --show-file-format               show moduleâ€™s config file contents
  -l,  --load-default                   load the backup configuration for the component file
"
}

# TODO tests
function options_parser {
    case "$1" in
        -f|--file)
            file_path=$2
            if [[ ! -f "$file_path" ]]; then
                l_error "'$file_path' not a file"
                exit 5
            fi
            ;;
        -p|--show-file-format)
            show_file=true
            ;;
        -l|--load-default)
            load_default=true
            ;;
        *)
            l_error "Unknown option: $1"
            exit 5
    esac
}


# TODO update tests
function positional_args_parser {
    set -eu

    if [[ $# -eq 1 ]]; then
        case "$1" in
            cluster|commons|controller|corosync-pacemaker|elasticsearch|cortx-motr|haproxy|keepalived|openldap|rabbitmq.sls|release|rsyslog.sls|s3clients|s3server|sspl|storage_enclosure.sls|system|uds)
                component=$1
                ;;
            *)
                l_error "Invalid component type: $1"
                usage
                exit 5
        esac
    else
        l_error "Inappropriate number of positional arguments provided: $@"
        usage
        exit 2
    fi
}

parse_args 'f:pl' 'file:,show-file-format,load-default' options_parser positional_args_parser "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

# check srvnode-1 occurence in ssh-config
if [[ -n "$hostspec" ]]; then
    if [[ -z "$ssh_config" || -z "$(check_host_in_ssh_config "$hostspec" "$ssh_config" 2>/dev/null)" ]]; then
        l_error "srvnode-1 node ssh configuration is not found in ssh-config ($ssh_config)"
        exit 1
    fi
fi

if [[ "$show_file" == true ]]; then
    cortx_pillar_show_skeleton "$component" "$hostspec" "$ssh_config" "$sudo"
    exit 0
elif [[ "$load_default" == true ]]; then
    cortx_pillar_load_default "$component" "$hostspec" "$ssh_config" "$sudo"
    exit 0
elif [[ -z "$file_path" ]]; then
    l_error "'--file' is a required options for the pillar update"
    exit 1
fi

# update pillar on srvnode-1
cortx_pillar_update "$component" "$file_path" "$hostspec" "$ssh_config" "$sudo"
