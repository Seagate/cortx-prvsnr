#!/bin/sh
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#


set -euE

export LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/boxing.log}"
mkdir -p $(dirname "${LOG_FILE}")

function trap_handler {
    echo -e "\n***** ERROR! *****"
    echo "For detailed error logs, please see: $LOG_FILE"
    echo "******************"
}
trap trap_handler ERR

BASEDIR=$(dirname "${BASH_SOURCE}")

. ${BASEDIR}/../../common_utils/utility_scripts.sh
. $BASEDIR/prov_tasks
. $BASEDIR/shutdown


serial_number=

function usage {
    echo "\
    
    Usage:
        $0
           [
            --serial <Lyve Rack r1 serial number>
           ]
    Command Args:
        --serial    <SERIAL_NUMBER>   Lyve Rack r1 serial number
    "
}

function die {
    echo >&2 "$@"
    usage
    exit 1
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help) usage; exit 0
        ;;

        --serial)
            [ -z "$2" ] && die "Error: SERIAL NUMBER not provided";
            serial_number="$2"
            [ ${#serial_number} -ne 15 ] && die "Error: SERIAL NUMBER invalid";
            shift 2
            ;;
        *) echo "Invalid option $1"; usage; exit 1;;
    esac
done

# Check if Boxing flag file is present
box_flag_file="/opt/seagate/cortx/provisioner/generated_configs/boxed"
if [[ -f $box_flag_file ]]; then
    echo "INFO: Boxing script already run, printing system details required for unboxing" | tee -a ${LOG_FILE}
    file=$(ls -lrt /root/Lyve_rack_SystemID_*.txt | tail -1 | awk '{ print $9 }')
    if [[ -f $file ]]; then
        cat $file
    else
        echo "Could not find the file generated during boxing" | tee -a ${LOG_FILE}
    fi
    exit 0
fi

time_stamp=$(date)
 echo "*********************************************************" | tee -a ${LOG_FILE}
 echo "          Boxing the Cortx Lyve Drive Rack               " | tee -a ${LOG_FILE}
 echo "*********************************************************" | tee -a ${LOG_FILE}
 echo "DEBUG: run time: $time_stamp" >> ${LOG_FILE}
 echo "Hostname Server A: $hostname_a" | tee -a ${LOG_FILE}
 echo "Hostname Server B: $hostname_b" | tee -a ${LOG_FILE}
 echo "IP configuration at factory for Server A" >> ${LOG_FILE}
 ip a >> ${LOG_FILE}
 echo "IP configuration at factory for Server B" >> ${LOG_FILE}
 $ssh_cmd $pvt_ip_b ip a >> ${LOG_FILE}

# Prepare shutdown
ensure_healthy_cluster

if [[ -z $serial_number ]]; then
    echo "Warning: The Serial Number is not provided.." | tee -a ${LOG_FILE}
else
    salt "*" cmd.run "$(realpath ${BASEDIR})/../../common_utils/lr-serial-number ${serial_number}" ${salt_opts}
    echo "Genrating the Manifest file..." | tee -a ${LOG_FILE}
    cortxcli support_bundle generate manifest -c "manifest" 2>&1 | tee -a ${LOG_FILE}
fi

echo "INFO: Resolving service user credentials" | tee -a ${LOG_FILE}
service_user_name=$(salt-call pillar.get system:service_user:name --output=newline_values_only)
service_user_secret_encrypted=$(salt-call pillar.get system:service_user:password --output=newline_values_only)
service_user_secret=$(salt-call lyveutil.decrypt system "$service_user_secret_encrypted" --output=newline_values_only)

if [[ -z "$service_user_name" || -z "$service_user_secret" ]]; then
    msg="ERROR: credentials for a service user are not found"
    echo "$msg" | tee -a ${LOG_FILE}
    exit 1
fi

# Shutdown HA
if ! command -v pcs; then
    echo "ERROR: Command 'pcs' not found"
    exit 1
fi
if ! hctl status 2> /dev/null; then
    echo "Cortx cluster is not running"
else
    echo "Cortx cluster is running" | tee -a ${LOG_FILE}
    echo "Dumping hctl cluster status" >> ${LOG_FILE}
    hctl status >> ${LOG_FILE}
    echo "Dumping pcs cluster status" >> ${LOG_FILE}
    pcs status >> ${LOG_FILE}
    echo "INFO: Starting Cortx cluster in maintenance mode..." 2>&1 | tee -a ${LOG_FILE}
    hctl node maintenance --all --timeout-sec=600 2>&1 | tee -a ${LOG_FILE}
    echo "INFO: Initiating HA cluster stop..." 2>&1 | tee -a ${LOG_FILE}
    pcs cluster stop --all  2>&1 | tee -a ${LOG_FILE}
fi

# Set remote root login only through private ips
#update_ssh_settings

# Provisioner tasks
#stop_rabbitmq_cluster #This is taken care for now by having internalhostnames
stop_services
get_nw_interface_names
reset_vips

# The next 2 steps creates a blank entry for public_ip_address in uu_cluster.sls
# Management network changes
reset_pub_mgmt_ips
# Public data network changes
reset_pub_data_ips

seagate_refs_cleanup
#TODO: Remove URLs from release and commons sls
backup_files

# Set unused management network on Server-A for service use
configure_service_port

#Remove gluster fs mounts
remove_gfs_mounts

# Create user for unboxing
dump_unboxing_data "$service_user_name" "$service_user_secret"

# Create flag file
boxing_flag $box_flag_file

# Power-off sequence
#shutdown_controller
shutdown_node
