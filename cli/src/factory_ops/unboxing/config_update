#!/bin/sh

# Functions in this file address following:
#   1. Updates /root/.ssh/config file 
#   2. Update cluster.sls with hostnames obtained for node-1 and node-2 
#   3. Update /etc/salt/minion for hostname
#   4. Start rabbitmq cluster   <= Currently handled in init
set -euE

export LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/unboxing_config_update.log}"
mkdir -p $(dirname "${LOG_FILE}")
#truncate -s 0 ${LOG_FILE}

BASEDIR=$(dirname "${BASH_SOURCE}")

. ${BASEDIR}/../../common_utils/utility_scripts.sh
. ${BASEDIR}/../../common_utils/functions.sh


PRVSNR_ROOT="/opt/seagate/eos-prvsnr"
salt_opts="--no-color --out-file=${LOG_FILE} --out-file-append"

# private_data_ip_node_1=$(grep -m1 -A8 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|grep "pvt_ip_addr"|tail -n1|cut -d':' -f2|tr -d "[:space:]")
# private_data_ip_node_2=$(grep -m2 -A8 -P "data_nw:" ${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls|grep "pvt_ip_addr"|tail -n1|cut -d':' -f2|tr -d "[:space:]")
#private_data_ip_node_1=$(get_pillar_data cluster:srvnode-1:network:data_nw:pvt_ip_addr)
#private_data_ip_node_2=$(get_pillar_data cluster:srvnode-2:network:data_nw:pvt_ip_addr)

function trap_handler {
    echo "***** ERROR! *****"
    echo "For detailed error logs, please see: $LOG_FILE"
    echo "******************"
}
trap trap_handler ERR

function update_ssh_config {
    if [[ "srvnode-1" == "$(cat /etc/salt/minion_id)" ]]; then
        echo -n "Updating server A hostname in ssh config file of server A..................." 2>&1|tee -a ${LOG_FILE}
        # Replace node-1 entry
        local primary_host=$(hostname)
        # echo ${primary_host}
        local line_to_replace=$(grep -m1 -noP "HostName" /root/.ssh/config|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "s|Host srvnode-1.*|Host srvnode-1 ${primary_host}|" /root/.ssh/config
        sed -i "${line_to_replace}s|HostName.*|HostName ${primary_host}|" /root/.ssh/config
        echo "Ok." | tee -a ${LOG_FILE}

        # Replace node-2 entry
        echo "private_data_ip_node_2: $private_data_ip_node_2"
        echo -n "Updating server B hostname in ssh config file of server A..................." 2>&1|tee -a ${LOG_FILE}
        local secondary_host=$(ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "hostname")
        # echo ${secondary_host}
        local line_to_replace=$(grep -m2 -noP "HostName" /root/.ssh/config|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "s|Host srvnode-2.*|Host srvnode-2 ${secondary_host}|" /root/.ssh/config
        sed -i "${line_to_replace}s|HostName.*|HostName ${secondary_host}|" /root/.ssh/config
        echo "Ok." | tee -a ${LOG_FILE}
    else
        echo "private_data_ip_node_1: $private_data_ip_node_1"
        echo -n "Updating server B hostname in ssh config file of server B..................." 2>&1|tee -a ${LOG_FILE}
        # Replace node-1 entry
        local primary_host=$(ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_1} "hostname")
        # echo ${primary_host}
        local line_to_replace=$(grep -m1 -noP "HostName" /root/.ssh/config|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "s|Host srvnode-1.*|Host srvnode-1 ${primary_host}|" /root/.ssh/config
        sed -i "${line_to_replace}s|HostName.*|HostName ${primary_host}|" /root/.ssh/config
        echo "Ok." | tee -a ${LOG_FILE}

        # Replace node-2 entry
        echo -n "Updating server A hostname in ssh config file of server B..................." 2>&1|tee -a ${LOG_FILE}
        local secondary_host=$(hostname)
        # echo ${secondary_host}
        local line_to_replace=$(grep -m2 -noP "HostName" /root/.ssh/config|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        sed -i "s|Host srvnode-2.*|Host srvnode-2 ${secondary_host}|" /root/.ssh/config
        sed -i "${line_to_replace}s|HostName.*|HostName ${secondary_host}|" /root/.ssh/config
        echo "Ok." | tee -a ${LOG_FILE}
    fi
}

function update_salt_minion {

    if [[ "srvnode-1" == "$(cat /etc/salt/minion_id)" ]]; then
        local host=$(hostname)
        local line_to_replace=$(grep -m1 -noP "master: " /etc/salt/minion|tail -1|cut -d: -f1)
        # echo ${line_to_replace}
        
        echo -n "Setting Salt master on server A (primary node).............................." 2>&1|tee -a ${LOG_FILE}
        sed -i "${line_to_replace}s|^master:.*|master: ${host}|" /etc/salt/minion
        echo "Ok." | tee -a ${LOG_FILE}

        echo -n "Setting Salt master on server B (secondary node)............................" 2>&1|tee -a ${LOG_FILE}
        ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "sed -i \"${line_to_replace}s|^master:.*|master: ${host}|\" /etc/salt/minion"
        echo "Ok." | tee -a ${LOG_FILE}
        
        # It's safe to restart service on both nodes
        echo -n "Restarting salt-minion on Server A.........................................." 2>&1|tee -a ${LOG_FILE}
        systemctl restart salt-minion
        echo "Ok." | tee -a ${LOG_FILE}

        echo -n "Restarting salt-minion on Server B.........................................." 2>&1|tee -a ${LOG_FILE}
        ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "systemctl restart salt-minion"
        echo "Ok." | tee -a ${LOG_FILE}

        sleep 5

        echo -n "Listing salt keys..........................................................." 2>&1 | tee -a ${LOG_FILE}
        salt-key -L ${salt_opts}
        echo "Ok."
        echo -n "Accepting salt keys........................................................." 2>&1 | tee -a ${LOG_FILE}
        salt-key -A -y >> ${LOG_FILE}
        echo "Ok." | tee -a ${LOG_FILE}

        sleep 5
    fi
}

function update_cluster_sls {
    local mgmt_vip=${1:-}
    local cluster_vip=${2:-}
    local _static_ip_a=${3:-}
    local _static_ip_b=${4:-}

    local _cluster_sls_path=${PRVSNR_ROOT}/pillar/components/cluster.sls
    if [[ -f "${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls" ]]; then
        _cluster_sls_path=${PRVSNR_ROOT}/pillar/user/groups/all/cluster.sls
    fi

    if [[ "srvnode-1" == "$(cat /etc/salt/minion_id)" ]]; then
        echo -n "Updating Management VIP in pillar..........................................." 2>&1|tee -a ${LOG_FILE}
        local line_to_replace=$(grep -m1 -n "mgmt_vip:" ${_cluster_sls_path}|tail -1|cut -d: -f1)
        sed -i "${line_to_replace},/mgmt_vip:*/ s|mgmt_vip:.*|mgmt_vip: ${mgmt_vip}|" ${_cluster_sls_path}
        echo "Ok." | tee -a ${LOG_FILE}

        echo -n "Updating Cluster IP in pillar..............................................." 2>&1|tee -a ${LOG_FILE}
        local line_to_replace=$(grep -m1 -n "cluster_ip:" ${_cluster_sls_path}|tail -1|cut -d: -f1)
        sed -i "${line_to_replace},/cluster_ip:*/ s|cluster_ip:.*|cluster_ip: ${cluster_vip}|" ${_cluster_sls_path}
        echo "Ok." |tee -a ${LOG_FILE}

         #Update public data interface ips
        if [[ ! -z ${_static_ip_a} && ! -z ${_static_ip_b} ]]; then
            echo "Updating static IP of public data network in pillar for both servers" |tee -a ${LOG_FILE}
            echo "Updating static data ip ($_static_ip_a) for server A" >> $LOG_FILE
            line_node1_ip=`grep -A8 -n "data_nw:"  $_cluster_sls_path | grep "ipaddr:" | cut -d- -f1 | head -1`
            sed -ie "${line_node1_ip}s/.*/                ipaddr: ${_static_ip_a}/" $_cluster_sls_path
            echo "Updating static data ip ($_static_ip_b) for server B" >> $LOG_FILE
            line_node2_ip=`grep -A8 -n "data_nw:"  $_cluster_sls_path | grep "ipaddr:" | cut -d- -f1 | tail -1`
            sed -ie "${line_node2_ip}s/.*/                ipaddr: ${_static_ip_b}/" $_cluster_sls_path
            echo "Done" | tee -a ${LOG_FILE}
        fi

        echo -n "Updating hostname of Server A..............................................." 2>&1|tee -a ${LOG_FILE}
        # Replace node-1 entry
        # Hostname
        local primary_host=$(hostname)
        echo "DEBUG:primary_host: ${primary_host}" >> ${LOG_FILE}
        local line_to_replace=$(grep -m1 -n "srvnode-1:" ${_cluster_sls_path}|tail -1|cut -d: -f1)
        echo "DEBUG: line_to_replace: ${line_to_replace}" >> ${LOG_FILE}
        sed -i "${line_to_replace},/hostname:*/ s|hostname:.*|hostname: ${primary_host}|" ${_cluster_sls_path}
        echo "Ok." | tee -a ${LOG_FILE}
        # BMC IP-address
        # grep -m1 -A10 -n "srvnode-1:" ${_cluster_sls_path}|grep -m1 -A3 "bmc"|grep -m1 "ip"|cut -d: -f2|tr -d [:space:]
        # sed -i "${line_to_replace},/ip:*/ s|ip:.*|ip: ${primary_host}|" ${_cluster_sls_path}
        # echo "Updated cluster.sls for node-1 hostname on primary node" 2>&1|tee -a ${LOG_FILE}
        (hostnamectl status | grep Chassis | grep -q server) && {
            echo -n "Fetching and updating BMC IP for Server A..................................." 2>&1|tee -a ${LOG_FILE}
            update_bmc_ip "srvnode-1" >> ${LOG_FILE}
            echo "Ok." | tee -a ${LOG_FILE}
        }

        # Replace node-2 entry
        # Hostname
        echo -n "Updating hostname of Server B..............................................." 2>&1|tee -a ${LOG_FILE}
        local secondary_host=$(ssh -i /root/.ssh/id_rsa_prvsnr -o "StrictHostKeyChecking no" ${private_data_ip_node_2} "hostname")
        echo "DEBUG: secondary_host: ${secondary_host}" >> ${LOG_FILE}
        local line_to_replace=$(grep -m1 -n "srvnode-2:" ${_cluster_sls_path}|tail -1|cut -d: -f1)
        echo "DEBUG: line_to_replace: ${line_to_replace}" >> ${LOG_FILE}
        sed -i "${line_to_replace},/hostname:*/ s|hostname:.*|hostname: ${secondary_host}|" ${_cluster_sls_path}
        echo "Ok." | tee -a ${LOG_FILE}
        # BMC IP-address
        # grep -m1 -A10 -n "srvnode-2:" ${_cluster_sls_path}|grep -m1 -A3 "bmc"|grep -m1 "ip"|cut -d: -f2|tr -d [:space:]
        # sed -i "${line_to_replace},/ip:*/ s|ip:.*|ip: ${primary_host}|" ${_cluster_sls_path}
        # echo "Updated cluster.sls for node-1 hostname on primary node" 2>&1|tee -a ${LOG_FILE}
        (hostnamectl status | grep Chassis | grep -q server) && {
            echo -n "Fetching and updating BMC IP for Server B..................................." 2>&1|tee -a ${LOG_FILE}
            update_bmc_ip "srvnode-2" "srvnode-2" >> ${LOG_FILE}
            echo "Ok." | tee -a ${LOG_FILE}
        }

        echo -n "Refreshing Salt pillar from Server A........................................" 2>&1|tee -a ${LOG_FILE}
        sleep 5
        salt "*" saltutil.refresh_pillar ${salt_opts}
        echo "Ok." 2>&1|tee -a ${LOG_FILE}
    fi
}

function remove_seagate_url {
    echo "Removing seagate urls from salt commons pillar" | tee -a ${LOG_FILE}

    if [[ -f "${PRVSNR_ROOT}/pillar/components/commons.sls" ]]; then
        local _commons_sls_path=${PRVSNR_ROOT}/pillar/components/commons.sls
        yes | cp -f $_commons_sls_path ${_commons_sls_path}.bkp
        local _redhat_url=$(grep -n "RedHat:"  $_commons_sls_path | awk '{ print $3 }')
        if [[ ! -z $_redhat_url ]]; then
            _line_no=`grep -n "RedHat:"  $_commons_sls_path | cut -d: -f1`
            if [[ ! -z $_line_no ]]; then
                echo "Removing RedHat url from $_commons_sls_path" >> $LOG_FILE
                sed -ie "${_line_no}s/.*/    RedHat:/" $_commons_sls_path
                n_diff_lines=`diff $_commons_sls_path ${_commons_sls_path}.bkp | grep "^>" | wc -l`
                echo "DEBUG: n_diff_lines: $n_diff_lines" >>  ${LOG_FILE}
                if [[ $n_diff_lines != 1 ]]; then
                    echo "Could not update the RedHat url in $_commons_sls_path, restoring the original content" | tee -a ${LOG_FILE}
                    yes | cp -f ${_commons_sls_path}.bkp $_commons_sls_path
                else
                    echo "Successfully removed RedHat url from $_commons_sls_path" >> ${LOG_FILE}
                fi
            else
                echo "Could not find the line number for RedHat url in $_commons_sls_path, ignoring" >> $LOG_FILE
            fi
        else
            echo "No url found for RedHat in $_commons_sls_path, ignoring" >> ${LOG_FILE}
        fi

        # Take backup of updated copy of commons sls
        yes | cp -f $_commons_sls_path ${_commons_sls_path}.bkp
        local _centos_url=$(grep -n "CentOS:"  $_commons_sls_path | awk '{ print $3 }')
        if [[ ! -z $_centos_url ]]; then
            _line_no=`grep -n "CentOS:"  $_commons_sls_path | cut -d: -f1`
            if [[ ! -z $_line_no ]]; then
                echo "Removing CentOS url from $_commons_sls_path" >> $LOG_FILE
                sed -ie "${_line_no}s/.*/    CentOS:/" $_commons_sls_path
                n_diff_lines=`diff $_commons_sls_path ${_commons_sls_path}.bkp | grep "^>" | wc -l`
                echo "DEBUG: n_diff_lines: $n_diff_lines" >>  ${LOG_FILE}
                if [[ $n_diff_lines != 1 ]]; then
                    echo "Could not update the CentOS url in $_commons_sls_path, restoring the original content" | tee -a ${LOG_FILE}
                    yes | cp -f ${_commons_sls_path}.bkp $_commons_sls_path
                else
                    echo "Successfully removed CentOS url from $_commons_sls_path" >> ${LOG_FILE}
                fi
            else
                echo "Could not find the line number for CentOS url in $_commons_sls_path, ignoring" >> $LOG_FILE
            fi
        else
            echo "No url found for CentOS in $_commons_sls_path, ignoring" >> ${LOG_FILE}
        fi
    else
        echo "No file $_commons_sls_path, ignoring" >> ${LOG_FILE}
    fi

    if [[ -f "${PRVSNR_ROOT}/pillar/user/groups/all/commons.sls" ]]; then
        _commons_sls_path=${PRVSNR_ROOT}/pillar/user/groups/all/commons.sls
        yes | cp -f $_commons_sls_path ${_commons_sls_path}.bkp

        local _redhat_url=$(grep -n "RedHat:"  $_commons_sls_path | awk '{ print $3 }')
        if [[ ! -z $_redhat_url ]]; then
            _line_no=`grep -n "RedHat:"  $_commons_sls_path | cut -d: -f1`
            if [[ ! -z $_line_no ]]; then
                echo "Removing RedHat url from $_commons_sls_path" >> $LOG_FILE
                sed -ie "${_line_no}s/.*/        RedHat:/" $_commons_sls_path
                n_diff_lines=`diff $_commons_sls_path ${_commons_sls_path}.bkp | grep "^>" | wc -l`
                echo "DEBUG: n_diff_lines: $n_diff_lines" >>  ${LOG_FILE}
                if [[ $n_diff_lines != 1 ]]; then
                    echo "Could not update the RedHat url in $_commons_sls_path, restoring the original content" | tee -a ${LOG_FILE}
                    yes | cp -f ${_commons_sls_path}.bkp $_commons_sls_path
                else
                    echo "Successfully removed RedHat url from $_commons_sls_path" >> ${LOG_FILE}
                fi
            else
                echo "Could not find the line number for RedHat url in $_commons_sls_path, ignoring" >> $LOG_FILE
            fi
        else
            echo "No url found for RedHat in $_commons_sls_path, ignoring" >> ${LOG_FILE}
        fi

        # Take backup of updated copy of commons sls
        yes | cp -f $_commons_sls_path ${_commons_sls_path}.bkp
        local _centos_url=$(grep -n "CentOS:"  $_commons_sls_path | awk '{ print $3 }')
        if [[ ! -z $_centos_url ]]; then
            _line_no=`grep -n "CentOS:"  $_commons_sls_path | cut -d: -f1`
            if [[ ! -z $_line_no ]]; then
                echo "Removing CentOS url from $_commons_sls_path" >> $LOG_FILE
                sed -ie "${_line_no}s/.*/        CentOS:/" $_commons_sls_path
                n_diff_lines=`diff $_commons_sls_path ${_commons_sls_path}.bkp | grep "^>" | wc -l`
                echo "DEBUG: n_diff_lines: $n_diff_lines" >>  ${LOG_FILE}
                if [[ $n_diff_lines != 1 ]]; then
                    echo "Could not update the CentOS url in $_commons_sls_path, restoring the original content" | tee -a ${LOG_FILE}
                    yes | cp -f ${_commons_sls_path}.bkp $_commons_sls_path
                else
                    echo "Successfully removed CentOS url from $_commons_sls_path" >> ${LOG_FILE}
                fi
            else
                echo "Could not find the line number for CentOS url in $_commons_sls_path, ignoring" >> $LOG_FILE
            fi
        else
            echo "No url found for CentOS in $_commons_sls_path, ignoring" >> ${LOG_FILE}
        fi
    else
        echo "No file $_commons_sls_path, ignoring" >> ${LOG_FILE}
    fi

    echo "Refreshing Salt pillars" >> ${LOG_FILE}
    salt '*' saltutil.refresh_pillar ${salt_opts}
    echo "Checking if the  REdHat url is removed from commons pillar" >> ${LOG_FILE}

    # Check if RedHat url is removed from commons url on both nodes
    _node1_url=$(salt srvnode-1 pillar.get commons:cortx_commons:RedHat --output=newline_values_only ${salt_opts})
    _node2_url=$(salt srvnode-2 pillar.get commons:cortx_commons:RedHat --output=newline_values_only ${salt_opts})
    if [[ ! -z "$_node1_url" ]]; then
        echo "ERROR: RedHat url could not be removed from commons url on srvnode-1" | tee -a ${LOG_FILE}
        exit 1
    fi

    if [[ ! -z "$_node2_url" ]]; then
        echo "ERROR: RedHat url could not be removed from commons url on srvnode-2" | tee -a ${LOG_FILE}
        exit 1
    fi

    echo "RedHat url is removed from commons pillar" >> ${LOG_FILE}

    # Check if CentOS url is removed from commons url on both nodes
    _node1_url=$(salt srvnode-1 pillar.get commons:cortx_commons:CentOS --output=newline_values_only ${salt_opts})
    _node2_url=$(salt srvnode-2 pillar.get commons:cortx_commons:CentOS --output=newline_values_only ${salt_opts})
    if [[ ! -z "$_node1_url" ]]; then
        echo "ERROR: CentOS url could not be removed from commons url on Server A" | tee -a ${LOG_FILE}
        exit 1
    fi

    if [[ ! -z "$_node2_url" ]]; then
        echo "ERROR: CentOS url could not be removed from commons url on Server B" | tee -a ${LOG_FILE}
        exit 1
    fi

    echo "CentOS url is removed from commons pillar" >> ${LOG_FILE}

    echo "Done" | tee -a ${LOG_FILE}
}

function remove_target_build {

    echo "Removing CORTX build url from configuration" | tee -a ${LOG_FILE}
    local _release_sls_path=${PRVSNR_ROOT}/pillar/components/release.sls
    yes | cp -f $_release_sls_path ${_release_sls_path}.bkp
    local _tgt_build=$(grep -n "target_build:"  $_release_sls_path | awk '{ print $3 }')
    if [[ ! -z $_tgt_build ]]; then
        line_target_build=`grep -n "target_build:"  $_release_sls_path | cut -d: -f1`
        if [[ ! -z $line_target_build ]]; then
            echo "Removing target_build from $_release_sls_path" >> $LOG_FILE
            sed -ie "${line_target_build}s/.*/    target_build:/" $_release_sls_path
            n_diff_lines=`diff $_release_sls_path ${_release_sls_path}.bkp | grep "^>" | wc -l`
            echo "DEBUG: n_diff_lines: $n_diff_lines" >>  ${LOG_FILE}
            if [[ $n_diff_lines != 1 ]]; then
                echo "Could not update the target_build in $_release_sls_path, restoring the original content" | tee -a ${LOG_FILE}
                yes | cp -f ${_release_sls_path}.bkp $_release_sls_path
            else
                echo "Successfully updated target_build in $_release_sls_path" >> ${LOG_FILE}
            fi
        else
            echo "Could not find the target_build line number in $_release_sls_path, ignoring" >> $LOG_FILE
        fi
    fi

    if [[ -f "${PRVSNR_ROOT}/pillar/user/groups/all/release.sls" ]]; then
        local _release_sls_path_user=${PRVSNR_ROOT}/pillar/user/groups/all/release.sls
        yes | cp -f $_release_sls_path_user ${_release_sls_path_user}.bkp
        _tgt_build=$(grep -n "target_build:"  $_release_sls_path_user | awk '{ print $3 }')
        if [[ ! -z $_tgt_build ]]; then
            line_target_build=`grep -n "target_build:"  $_release_sls_path_user | cut -d: -f1`
            if [[ ! -z $line_target_build ]]; then
                echo "Removing target_build from $_release_sls_path_user" >> $LOG_FILE
                sed -ie "${line_target_build}s/.*/    target_build:/" $_release_sls_path_user
                # ensure the sed caused only one line change
                n_diff_lines=`diff $_release_sls_path_user ${_release_sls_path_user}.bkp | grep "^>" | wc -l`
                echo "DEBUG: n_diff_lines: $n_diff_lines" >>  ${LOG_FILE}
                if [[ $n_diff_lines != 1 ]]; then
                    echo "Could not update the target_build in $_release_sls_path_user, restoring the original content" | tee -a ${LOG_FILE}
                    yes | cp -f ${_release_sls_path_user}.bkp $_release_sls_path_user
                else
                    echo "Successfully updated target_build in $_release_sls_path_user" >> ${LOG_FILE}
                fi
            else
                echo "Could not find the target_build line number in $_release_sls_path_user, ignoring" >> $LOG_FILE
            fi
        fi
    fi

    echo "Refreshing Salt pillars" >> ${LOG_FILE}
    salt '*' saltutil.refresh_pillar ${salt_opts}
    echo "Checking if the target_bulid url is removed from release pillar" >> ${LOG_FILE}

    _node1_tgt_build=$(salt srvnode-1 pillar.get eos_release:target_build --output=newline_values_only ${salt_opts})
    _node2_tgt_build=$(salt srvnode-2 pillar.get eos_release:target_build --output=newline_values_only ${salt_opts})
    if [[ ! -z "$_node1_tgt_build" ]]; then
        echo "ERROR: Target build url could not be reset on Server A" | tee -a ${LOG_FILE}
        exit 1
    fi

    if [[ ! -z "$_node2_tgt_build" ]]; then
        echo "ERROR: Target build url could not be reset on Server B" | tee -a ${LOG_FILE}
        exit 1
    fi

    echo "target_bulid url is removed from release pillar" >> ${LOG_FILE}
    echo "Done" | tee -a ${LOG_FILE}
}

function recover_rabbitmq_cluster {
    # # Update RabbitMQ cluster
    echo -n "Starting rabbitmq cluster......" 2>&1|tee -a ${LOG_FILE}
    salt "srvnode-1" state.apply components.misc_pkgs.rabbitmq ${salt_opts}; sleep 5
    salt "srvnode-2" state.apply components.misc_pkgs.rabbitmq ${salt_opts}; sleep 5
    echo "Done"
}


function lock_unboxing_user {

    # TODO: Locking the password of cortxub is commented for Beta.
    #       Find alternative if unboxing fails and user gets locked out.
    #passwd --lock cortxub >> ${LOG_FILE}

    echo "\

******************* Please Run next steps manually ************************

  1. Check if all IP addresses are assigned as expected

      $ sudo ip a

      NOTE: run this on both servers.

  2. Check if system has been assigned a hostname:

      $ sudo salt '*' cmd.run hostname

      NOTE: run this from Server A (Primary server)

  3. Check if Cortx cluster is up and all services are Started, run:

      $ sudo pcs status

      NOTE: All the resources/services should be listed as started.
" 2>&1 | tee -a ${LOG_FILE}
}

function remove_boxing_flag {
    if [[ -f '/opt/seagate/cortx/provisioner/generated_config/boxed' ]]
    then
        echo "DEBUG: Boxed file found. Removing boxed file." >> ${LOG_FILE}
        rm -f /opt/seagate/cortx/provisioner/generated_config/boxed || true
    else
        echo "\
ERROR: Boxing command was not run
       Please ensure that the boxing sequence was done before doing unboxing.
***** FAILED!! *****
The detailed logs are kept at: ${LOG_FILE}" | tee -a ${LOG_FILE}
    fi
}

