#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#



set -euE


BASEDIR=$(dirname "${BASH_SOURCE}")

LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/deploy-vm.log}"
export LOG_FILE

. $BASEDIR/common_utils/functions.sh

function trap_handler {
  echo "For detailed error logs, please see: $LOG_FILE"
}
trap trap_handler ERR

run_all=true
run_system_states=false
run_prereq_states=false
run_sync_states=false
run_io_states=false
run_ctrlpath_states=false

system_states=(
    # states to be applied in desired sequence
        "system"
        "system.storage"
        "system.network"
        "system.network.data.public"
        "system.network.data.direct"
        "misc_pkgs.rsyslog"
        "system.firewall"
        "system.logrotate"
        "system.chrony"
    )

prereq_states=(
    # states to be applied in desired sequence
        "misc_pkgs.ssl_certs"
        "ha.haproxy"
        "ha.haproxy.start"
        "misc_pkgs.openldap"
        "misc_pkgs.rabbitmq"
        "misc_pkgs.nodejs"
        "misc_pkgs.elasticsearch"
        "misc_pkgs.kibana"
        "misc_pkgs.statsd"
        "misc_pkgs.lustre"
        "misc_pkgs.consul.install"
    )

iopath_states=(
    # states to be applied in desired sequence
        "motr"
        "s3server"
        "hare"
    )

controlpath_states=(
    # states to be applied in desired sequence
        "sspl"
        "uds"
        "csm"
    )

sync_states=(
    # states to be applied in desired sequence
        "sync.software.openldap"
        "sync.software.rabbitmq"
    )


function usage {
  echo "\
Usage: $0 [options]

Installs CORTX stack and configures cortx services either on VM environment.

Must be run from primary node for Dual node and from VM itself for single node.

General options:
$base_options_usage
Options:
       -S,  --singlenode           switch to single node mode setup
       --prereq-states             deploy only prereq states (components.misc_pkgs)
       --sync-states               deploy only the software synchronization
       --iopath-states             deploy only iopath states (motr, s3server & Hare)
       --ctrlpath-states           deploy only control path states (sspl & csm)
       --system-states             deploy only system states
"
}


function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            ;;
        --system-states)
            run_system_states=true
            run_all=false
            ;;
        --prereq-states)
            run_prereq_states=true
            run_all=false
            ;;
        --sync-states)
            run_sync_states=true
            run_all=false
            ;;
        --iopath-states)
            run_io_states=true
            run_all=false
            ;;
        --ctrlpath-states)
            run_ctrlpath_states=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function run_states {
    local states=${@}

    # apply states
    for state in ${states[@]}; do
        if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
            l_info "Installing 'components.$state'"
            $cmd salt srvnode-1 state.apply components.$state $salt_opts
            sleep 2     # Mindfulness break
        else
            if [[ "$state" == "sspl" ]]; then
                # Execute first on srvnode-2 then on srvnode-1.
                l_info "Installing 'components.$state' for non primary nodes"
                $cmd salt -C "not srvnode-1" state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Installing 'components.$state' for primary node"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            elif [[ "$state" == "sync.software.rabbitmq"
                || "$state" == "sync.software.openldap" ]]; then
                # Execute first on srvnode-1 then on srvnode-2.
                l_info "Installing 'components.$state' for primary node"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Installing 'components.$state' for non primary nodes"
                $cmd salt -C "not srvnode-1" state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            else
                l_info "Installing 'components.$state' for both nodes"
                $cmd salt "*" state.apply components.$state $salt_opts
                sleep 2     # Mindfulness break
            fi
        fi
        if [[ "$state" == "hare" ]]; then
            l_info "Bootstraping cluster"
            hctl bootstrap --mkfs /var/lib/hare/cluster.yaml 2>&1|tee ${LOG_FILE}
        fi

    done
}

function update_salt {
    # Refresh salt pillar data
    l_info "Updating Salt data"
    $cmd salt "*" saltutil.sync_all $salt_opts
    $cmd salt "*" saltutil.refresh_pillar $salt_opts
    $cmd salt "*" saltutil.refresh_grains $salt_opts
}

function encrypt_pillar {
    # Encrypt passwords in pillar data
    l_info "Encrypting salt pillar data"
    python3 ${BASEDIR}/pillar_encrypt
    update_salt
}

parse_args 'S' 'singlenode,prereq-states,sync-states,iopath-states,ctrlpath-states,system-states' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
salt_opts_dry_run=
if [[ "$dry_run" == true ]]; then
    salt_opts_dry_run="test=True"
fi
salt_opts="--no-color --out-file=$LOG_FILE --out-file-append $salt_opts_dry_run --timeout=600"

update_salt
hostnamectl status | grep Chassis | grep -q server && {
    echo "This script is specifically for VM deployment.For HW please run deploy" 
    exit 1
}

if [[ "$run_all" == true ]]; then
    run_states "${system_states[@]}"
    encrypt_pillar

    run_states "${prereq_states[@]}"
    if [[ "$singlenode" != true ]]; then
        # TODO use salt orchestration
        run_states "${sync_states[@]}"
    fi

    run_states "${iopath_states[@]}"
    run_states "${controlpath_states[@]}"
fi

if [[ "$run_system_states" == true ]]; then
    l_info "Deploying the system states"
    run_states "${system_states[@]}"
    encrypt_pillar
fi

if [[ "$run_prereq_states" == true ]]; then
    l_info "Deploying the prereq states"
    run_states "${prereq_states[@]}"
fi

if [[ "$run_sync_states" == true 
    || "$singlenode" != true ]]; then
    l_info "Deploying the sync states"
    run_states  "${sync_states[@]}"
fi

if [[ "$run_io_states" == true ]]; then
    l_info "Recreating the metadata partitions"
    salt '*' state.apply components.system.storage
    if [[ "$singlenode" != true ]]; then
        # Mount partition
        salt-call mount.mount /var/motr $(salt-call pillar.get cluster:srvnode-1:storage:metadata_device:0 --output=newline_values_only)1 True ext4
        # Add fstab entry
        salt-call mount.set_fstab /var/motr $(salt-call pillar.get cluster:srvnode-1:storage:metadata_device:0 --output=newline_values_only)1 True ext4
    fi
    run_states "${iopath_states[@]}"
fi

if [[ "$run_ctrlpath_states" == true ]]; then
    l_info "Deploying the control path states"
    run_states "${controlpath_states[@]}"
fi

l_info "***** SUCCESS! *****"
l_info "The detailed logs can be seen at: $LOG_FILE"
l_info "Done"
