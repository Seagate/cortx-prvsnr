#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing, 
# please email opensource@seagate.com or cortx-questions@seagate.com."
#

set -euE

BASEDIR=$(dirname "${BASH_SOURCE}")

LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/deploy.log}"
export LOG_FILE

. $BASEDIR/common_utils/functions.sh

l_info "***** Running $0 *****"

function trap_handler {
    echo "***** FAILED!! *****"
    echo "For detailed error logs, please see: $LOG_FILE"
}
trap trap_handler ERR

run_all=true
run_system_states=false
run_prereq_states=false
run_sync_states=false
run_io_states=false
run_ha_states=false
run_ctrlpath_states=false
run_backup_states=false
tgt_node=srvnode-2

# states to be applied in desired sequence
system_states=(
    "system"
    "system.storage.multipath"
    #"system.storage.teardown"
    "system.storage"
    "system.network"
    "system.network.data.public"
    "system.network.data.direct"
    "misc_pkgs.rsyslog"
    "system.firewall"
    "system.logrotate"
    "system.chrony"
)

# states to be applied in desired sequence
prereq_states=(
    "misc_pkgs.rhel_sos"
    "misc_pkgs.ssl_certs"
    "ha.haproxy"
    "misc_pkgs.openldap"
    "misc_pkgs.rabbitmq"
    "misc_pkgs.nodejs"
    "misc_pkgs.elasticsearch"
    "misc_pkgs.kibana"
    "misc_pkgs.statsd"
)

# states to be applied in desired sequence
sync_states=(
    "sync.software.openldap"
    "sync.software.rabbitmq"
)

# states to be applied in desired sequence
iopath_states=(
    "misc_pkgs.lustre"
    "motr"
    "s3server"
)

# states to be applied in desired sequence
ha_states=(
    "ha.corosync-pacemaker"
    "hare"
    "ha.cortx-ha"
    "ha.iostack-ha"
)

# states to be applied in desired sequence
controlpath_states=(
    "sspl"
    "csm"
    "uds"
    "ha.ctrlstack-ha"
    "ha.cortx-ha.ha"
)

# states to be applied in desired sequence
backup_states=(
    "provisioner.backup"
    # "motr.backup" # TODO: Awaiting EOS-12637 fix
    "s3server.backup"
    "hare.backup"
    "ha.iostack-ha.backup"
    "sspl.backup"
    "csm.backup"
)

function usage {
  echo "\
Usage: $0 [options]

Installs CORTX stack and configures cortx services either on remote host or locally.

Target host is considered to be an cortx salt-master.

General options:
$base_options_usage
Options:
    -S <tgt_node>,  --singlenode=<tgt_node>      switch to single node mode setup
    --system-states                              deploy only system states
    --prereq-states                              deploy only prereq states (components.misc_pkgs)
    --sync-states                                deploy only the software synchronization
    --iopath-states                              deploy only iopath states (motr, s3server & Hare)
    --ha-states                                  deploy only ha states (corosync-pacemaker, iostack-ha)
    --ctrlpath-states                            deploy only control path states (sspl & csm)
    --backup-states                              deploy only backup states
"
}


function options_parser {
    set -eu

    case "$1" in
        -S|--singlenode)
            singlenode=true
            tgt_node="$2"
            shift
            ;;
        --system-states)
            run_system_states=true
            run_all=false
            ;;
        --prereq-states)
            run_prereq_states=true
            run_all=false
            ;;
        --sync-states)
            run_sync_states=true
            run_all=false
            ;;
        --iopath-states)
            run_io_states=true
            run_all=false
            ;;
        --ha-states)
            run_ha_states=true
            run_all=false
            ;;
        --ctrlpath-states)
            run_ctrlpath_states=true
            run_all=false
            ;;
        --backup-states)
            run_backup_states=true
            run_all=false
            ;;
        *)
            l_error "Unknown option: $1"
            usage
            exit 5
    esac
}

function run_states {
    local states=${@}

    # apply states
    if [[ "$singlenode" == true ]]; then
        # TODO use salt orchestration
        for state in ${states[@]}; do
            l_info "Applying 'components.$state' on node: $tgt_node"
            $cmd salt "$tgt_node" state.apply components.$state $salt_opts
            sleep 2     # Mindfulness break
        done
    else
        for state in ${states[@]}; do
            if [[ "$state" == "ha.corosync-pacemaker" ]]; then
                                # Execute first on srvnode-2 then on srvnode-1.
                
                l_info "Applying 'components.ha.corosync-pacemaker.install' for both nodes"
                $cmd salt srvnode-[1,2] state.apply components.ha.corosync-pacemaker.install  $salt_opts
                sleep 2     # Mindfulness break
                
                l_info "Applying 'components.ha.corosync-pacemaker.config.base' for both nodes"
                $cmd salt srvnode-[1,2] state.apply components.ha.corosync-pacemaker.config.base  $salt_opts
                
                l_info "Applying 'components.ha.corosync-pacemaker.config.authorize' for srvnode-1"
                $cmd salt srvnode-1 state.apply components.ha.corosync-pacemaker.config.authorize  $salt_opts
                l_info "Applying 'components.ha.corosync-pacemaker.config.setup_cluster' for srvnode-1"
                $cmd salt srvnode-1 state.apply components.ha.corosync-pacemaker.config.setup_cluster  $salt_opts
                l_info "Applying 'components.ha.corosync-pacemaker.config.cluster_ip' for srvnode-1"
                $cmd salt srvnode-1 state.apply components.ha.corosync-pacemaker.config.cluster_ip  $salt_opts
                l_info "Applying 'components.ha.corosync-pacemaker.config.stonith' for srvnode-1"
                $cmd salt srvnode-1 state.apply components.ha.corosync-pacemaker.config.stonith  $salt_opts
            # elif [[ "$state" == "system.storage.teardown" ]] ; then
            #     # Execute first on srvnode-2 then on srvnode-1.
            #     if [[ -e /opt/seagate/cortx/provisioner/generated_configs/srvnode-2.storage ]]; then
            #         l_info "Applying 'components.$state' for srvnode-2"
            #         $cmd salt srvnode-2 state.apply components.$state  $salt_opts
            #         sleep 2     # Mindfulness break
            #     fi
            #     if [[ -e /opt/seagate/cortx/provisioner/generated_configs/srvnode-1.storage ]]; then
            #         l_info "Applying 'components.$state' for srvnode-1"
            #         $cmd salt srvnode-1 state.apply components.$state  $salt_opts
            #         sleep 2     # Mindfulness break
            #     fi
            elif [[  "$state" == "system.storage"
                || "$state" == "sspl"
                || "$state" == "csm"
                || "$state" == "provisioner.backup"
                # || "$state" == "motr.backup" # TODO: Awaiting EOS-12637 fix
                || "$state" == "s3server.backup"
                || "$state" == "hare.backup"
                || "$state" == "ha.iostack-ha.backup"
                || "$state" == "sspl.backup"
                || "$state" == "csm.backup"
                ]]; then
                # Execute first on srvnode-2 then on srvnode-1.
                l_info "Applying 'components.$state' for srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state' for srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            elif [[ "$state" == "sync.software.rabbitmq"
                || "$state" == "sync.software.openldap"
                || "$state" == "system.storage.multipath"
                || "$state" == "sync.files"
                ]]; then
                # Execute first on srvnode-1 then on srvnode-2.
                l_info "Applying 'components.$state' for srvnode-1"
                $cmd salt srvnode-1 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
                l_info "Applying 'components.$state' for srvnode-2"
                $cmd salt srvnode-2 state.apply components.$state  $salt_opts
                sleep 2     # Mindfulness break
            else
                # if [[ ("hare" == "$state") && (-e /opt/seagate/cortx/hare/bin/consul) ]]; then
                #     l_info "Backup Consul"
                #     /opt/seagate/cortx/hare/bin/consul version
                # fi
                
                l_info "Applying 'components.$state' for both nodes"
                $cmd salt srvnode-[1,2] state.apply components.$state $salt_opts
                sleep 2     # Mindfulness break
            fi
        done
    fi
}

function update_salt {
    # Refresh salt pillar data
    l_info "Updating Salt data"
    l_info "Syncing states"
    $cmd salt "*" saltutil.sync_all $salt_opts
    sleep 2
    l_info "Refreshing pillars"
    sleep 2
    $cmd salt "*" saltutil.refresh_pillar $salt_opts
    l_info "Refreshing grains"
    sleep 2
    $cmd salt "*" saltutil.refresh_grains $salt_opts
    sleep 2
}

function encrypt_pillar {
    # Encrypt passwords in pillar data
    l_info "Encrypting salt pillar data"
    python3 ${BASEDIR}/pillar_encrypt
    update_salt
}


parse_args 'S' 'singlenode:,prereq-states,sync-states,iopath-states,ha-states,ctrlpath-states,system-states,backup-states' options_parser '' "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"

salt_opts=
salt_opts_dry_run=
if [[ "$dry_run" == true ]]; then
    salt_opts_dry_run="test=True"
fi
salt_opts="--no-color --out-file=$LOG_FILE --out-file-append $salt_opts_dry_run --timeout=600"

update_salt

if [[ "$run_all" == true ]]; then
    salt "*" cmd.run "rescan-scsi-bus.sh || true" $salt_opts
    run_states "${system_states[@]}"
    run_states "${prereq_states[@]}"
    run_states  "${sync_states[@]}"
    run_states  "${iopath_states[@]}"
    run_states "${ha_states[@]}"
    run_states "${controlpath_states[@]}"
    run_states "${backup_states[@]}"
fi

if [[ "$run_system_states" == true ]]; then
    l_info "Deploying the system states"
    salt "*" cmd.run "rescan-scsi-bus.sh || true" $salt_opts
    run_states "${system_states[@]}"
fi

if [[ "$run_prereq_states" == true ]]; then
    l_info "Deploying the prereq states"
    run_states  "${prereq_states[@]}"
fi

if [[ "$run_sync_states" == true ]]; then
    l_info "Deploying the sync states"
    run_states  "${sync_states[@]}"
fi

# if [[ "$run_io_states" == true || "$run_ha_states" == true ]]; then
#     l_info "Recreating the metadata partitions"
#     salt 'srvnode-2' state.apply components.system.storage $salt_opts
#     salt 'srvnode-1' state.apply components.system.storage $salt_opts
# fi

if [[ "$run_io_states" == true ]]; then
    l_info "Deploying the io path states"
    run_states  "${iopath_states[@]}"
fi

if [[ "$run_ha_states" == true ]]; then
    l_info "Deploying the ha states"
    run_states "${ha_states[@]}"
fi

if [[ "$run_ctrlpath_states" == true ]]; then
    l_info "Deploying the control path states"
    run_states "${controlpath_states[@]}"
fi

if [[ "$run_backup_states" == true ]]; then
    l_info "Synchronizing files on both nodes."
    run_states "${backup_states[@]}"
fi

# l_info "Backing up pillar files to user space."
# mkdir -p /opt/seagate/cortx/provisioner/pillar/user/groups/all
# cp -r /opt/seagate/cortx/provisioner/pillar/components/*.sls /opt/seagate/cortx/provisioner/pillar/user/groups/all/
# chown -R :prvsnrusers /opt/seagate/cortx/provisioner/pillar/user
# chmod -R 664 /opt/seagate/cortx/provisioner/pillar/user/groups/all/*.sls

l_info "***** SUCCESS! *****"
l_info "The detailed logs can be seen at: $LOG_FILE"
l_info "Done"

