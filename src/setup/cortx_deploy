#!/bin/bash
set -e;
# Log Levels:
DEBUG=1
INFO=2
WARNING=3
ERROR=4
FATAL=5
DEFAULT_LOG_LEVEL=${DEFAULT_LOG_LEVEL:-$INFO}

function log {
    LEVEL=$1; shift
    LOG_LEVEL=${LOG_LEVEL:-$DEFAULT_LOG_LEVEL}
    [[ $LEVEL -lt $LOG_LEVEL ]] && return

    echo "log: $*"
}

function show_usage {
    echo -e "usage: $(basename $0) [-f SOLUTION-CONFIG] [-l LOG-LEVEL][-c CORTX-CONFIG-URL] [-o] [-d] [-v]"
    echo -e "Where:"
    echo -e "..."
    echo -e " SOLUTION-CONFIG : Solution-Config directory containing -\
                                config.yaml, cluster.yaml and secrets.yaml"
    echo -e "                   (Default: /etc/cortx/solution)"
    echo -e " LOG-LEVEL       : Log Level (Default: 2)"
    echo -e "                   Supported log levels:"
    echo -e "                   DEBUG=1, INFO=2, WARNING=3, ERROR=4, FATAL=5"
    echo -e " CORTX-CONFIG-URL: URL of CORTX Configuration"
    echo -e "                   (Default is yaml:///etc/cortx/cluster.conf)"
    echo -e " ENABLE FORCE     : Override deployment, forcefully execute config apply and bootstrap cmds."
    echo -e " ENABLE DEBUG    : Enable Debugging CORTX Deployment (Default: False)"
    echo -e " VALIDATE CONF   : Validate constore and configmap config."
    exit 1
}

function validate_config {
    local config=$1
    if [ ! -f $config ]; then
        echo -e "ERROR: Config file $config not found, Provide correct config path."
        exit 1
    fi
}

function yaml_config {
    local config=$1
    echo "yaml://$config"
}

# Constants
DEBUG_FLAG=false
CONFIG_APPLY=true
CLUSTER_BOOTSTRAP=true
SOLUTION_CONFIG="/etc/cortx/solution"
CORTX_CONFSTORE="yaml:///etc/cortx/cluster.conf"

while [ $# -gt 0 ];  do
    case $1 in
    -l )
        shift 1
        LOG_LEVEL=$1
        ;;
    -n )
        shift 1
        NODE_ID=$1
        ;;
    -d )
        DEBUG_FLAG=true
        ;;
    -f )
        shift 1
        SOLUTION_CONFIG=$1
        ;;
    -c )
        shift 1
        CORTX_CONFSTORE=$1
        ;;
    -o )
       OVERRIDE="-o"
       ;;
    -h )
        show_usage
        ;;
    -v )
        VALIDATE_CONF="-v"
        ;;
    * )
        echo -e "Invalid argument provided : $1"
        show_usage
        exit 1
        ;;
    esac
    shift 1
done

# path for solution-config cluster.yaml and config.yaml files
CONFIG_INFO="$SOLUTION_CONFIG/config.yaml"
validate_config $CONFIG_INFO
CLUSTER_INFO="$SOLUTION_CONFIG/cluster.yaml"
validate_config $CLUSTER_INFO

export PATH=$PATH:/opt/seagate/provisioner/bin

# Check system is pre-configured:
# config apply: check confstore file.
# cluster bootstrap: check VERSION file is exist and phase and status key from confstore and.

node_id=`cat /etc/machine-id`
cluster_id=`conf $(yaml_config $CLUSTER_INFO) get "cluster>id"`
cluster_id=$(echo $cluster_id | tr -d "["\" | tr -d "\"]")
log $INFO "Starting deployment on node $node_id which is part of cluster $cluster_id."

FILE=$(awk -F:// '{print $2}' <<< $CORTX_CONFSTORE)
if [ -f "$FILE" ]; then
    log $WARNING "$FILE file exists. System looks to be pre-configured."
    CONFIG_APPLY=false

    version_file=`conf $CORTX_CONFSTORE get "node>$node_id>version"`
    version_file=$(echo $version_file | tr -d "["\" | tr -d "\"]")
    phase=`conf $CORTX_CONFSTORE get "node>$node_id>phase"`
    phase=$(echo $phase | tr -d "["\" | tr -d "\"]")
    status=`conf $CORTX_CONFSTORE get "node>$node_id>status"`
    status=$(echo $status | tr -d "["\" | tr -d "\"]")
    if [[ "$phase" = "deployment" && "$status" = "success" ]] || [ -f "$version_file" ]; then
        log $WARNING "Components mini-provisioners stages are already executed."
        CLUSTER_BOOTSTRAP=false
    fi
fi

if [ -z $OVERRIDE ]; then
    if [[ $CONFIG_APPLY = false && $CLUSTER_BOOTSTRAP = false ]]; then
        log $INFO "System is already configured. exiting from cortx_deploy."
        exit 0
    fi
else
    log $WARNING "Force option enabled, Overwriting existing deployment."
fi


if [ $CONFIG_APPLY = true ] || ! [ -z $OVERRIDE ]; then
    # Apply Cluster Config
    log $INFO "cortx_setup config apply -f $(yaml_config $CLUSTER_INFO) -c '$CORTX_CONFSTORE'"
    cortx_setup config apply -f $(yaml_config $CLUSTER_INFO) -c "$CORTX_CONFSTORE";

    # Apply Common Config
    log $INFO "cortx_setup config apply -f $(yaml_config $CONFIG_INFO) -c '$CORTX_CONFSTORE'"
    cortx_setup config apply -f $(yaml_config $CONFIG_INFO) -c "$CORTX_CONFSTORE";
fi

# Validate config
if ! [ -z $VALIDATE_CONF ];
then
    log $INFO "cortx_setup config validate -f $(yaml_config $CLUSTER_INFO) -c '$CORTX_CONFSTORE'"
    cortx_setup config validate -f $(yaml_config $CLUSTER_INFO) -c "$CORTX_CONFSTORE" || exit 1
    log $INFO "cortx_setup config validate -f $(yaml_config $CONFIG_INFO) -c '$CORTX_CONFSTORE'"
    cortx_setup config validate -f $(yaml_config $CONFIG_INFO) -c "$CORTX_CONFSTORE" || exit 1
fi

if [ $CLUSTER_BOOTSTRAP = true ] || ! [ -z $OVERRIDE ]; then
    # Bootstrap Cluster
    log $INFO "cortx_setup cluster bootstrap -c '$CORTX_CONFSTORE'"
    cortx_setup cluster bootstrap -c "$CORTX_CONFSTORE";
fi

# Check if debugging is enabled
if [ $DEBUG_FLAG = true ]; then
    log $INFO "cortx_setup DEBUG enabled...";
    sleep infinity;
fi
