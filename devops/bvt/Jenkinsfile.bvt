#!/usr/bin/env groovy

// TODO copy-paste from Jenkinsfile.ci

def err = null

Map config = [
    dynamicValidation: true,
    sendNotif: true,
    nodeLabel: 'centos-prvsnr-node'
]

String cortxRelease = params.cortxRelease ?: 'integration/centos-7.7.1908/last_successful'
String cortxTestRepoVersion = params.cortxTestRepoVersion ?: 'release'

echo """
    Cortx release is set to '$cortxRelease'
    cortx-test repo version is set to '$cortxTestRepoVersion'
"""

def nodeWrapper(label=null, body) {
    echo "Running on `${label}` node type"
    node(label) {
        try {
            body()
        } finally {
            echo "Cleanup"
            cleanWs()
        }
    }
}


Closure preparePythonEnv = {
    String testPipenvReport = "pipenv.out"
    stage('Prepare python environment') {
        try {
            withEnv(['PATH+USER_LOCAL_BIN=~/.local/bin']) {
                sh "bash -x devops/ci/create_python_env.sh $testPipenvReport >/dev/null 2>&1"
            }
        } catch (_err) {
            archiveArtifacts artifacts: testPipenvReport, allowEmptyArchive: true
            throw _err
        }
    }
}


Closure dynamicValidation = {
    checkout scm

    def test_err

    String testReportFileNameXml = "pytest.xml"
    String testReportFileNameLog = "pytest.log"
    String testReportFileNamePlain = "pytest.out.txt"

    String cortxTestRepo = "https://seagit.okla.seagate.com/eos/qa/eos-test/repository/"
    String cortxTestRepoArchive = 'eos-test.tgz'

    String bvtTestTargets = 'avocado_test/bvt_test.py'
    String bvtResultsArchive = 'bvt.results.tgz'

    String prvsnrCliRelease = cortxRelease
    String prvsnrRelease = cortxRelease

    String pytestArgs = "-l -vv -s --log-cli-level info --junit-xml=$testReportFileNameXml"
    pytestArgs += " --prvsnr-cli-release=$prvsnrCliRelease --prvsnr-release=$prvsnrRelease --cortx-release=$cortxRelease"
    pytestArgs += " --bvt-repo-path=$cortxTestRepoArchive --bvt-test-targets=$bvtTestTargets --bvt-results-path=$bvtResultsArchive"
    String pytestTargets = "test/bvt"

    try {
        stage('Clean VirtualBox environment') {
            sh "bash -x devops/ci/clean_vbox.sh vms"
        }

        stage('Download QA tests') {
            withCredentials([string(credentialsId: 'eos-test-repo-api-token', variable: 'token')]) {
                sh "curl -fsSL --request GET --header 'PRIVATE-TOKEN: $token' --insecure $cortxTestRepo/$cortxTestRepoVersion/archive.tar.gz -o $cortxTestRepoArchive"
            }
        }

        preparePythonEnv()

        // TODO is it a best way to ensure pipenv available
        withEnv(['PATH+USER_LOCAL_BIN=~/.local/bin']) {
            // run tests
            stage('Run tests') {
                sh """
                    pipenv run bash -x devops/ci/run_tests.sh "$pytestArgs $pytestTargets" '' "$testReportFileNamePlain"
                """
            }
        }
    } catch (_err) {
        test_err = _err
        throw _err
    } finally {
        stage("Upload reports") {
            sh "ls -la pytest* || true"
            sh """
                if [[ -f "$bvtResultsArchive" ]]; then
                    tar zxvf $bvtResultsArchive ./results.xml ./job.log ./journalctl.out.txt
                fi
            """
            if (test_err) {
                archiveArtifacts artifacts: testReportFileNamePlain, allowEmptyArchive: true
                archiveArtifacts artifacts: testReportFileNameLog, allowEmptyArchive: true
                archiveArtifacts artifacts: bvtResultsArchive, allowEmptyArchive: true
                archiveArtifacts artifacts: "journalctl.out.txt", allowEmptyArchive: true
            }
            junit testResults: "results.xml", allowEmptyResults: true
            archiveArtifacts artifacts: "job.log", allowEmptyArchive: true
            junit testResults: testReportFileNameXml, allowEmptyResults: true
        }
    }
}


// PIPELINE

try {
    timeout(180) {
        stage('Build / Test') {
            nodeWrapper(config.nodeLabel) {
                dynamicValidation()
            }
        }

        currentBuild.result = 'SUCCESS'
    }
} catch (Exception _err) {
    currentBuild.result = 'FAILURE'
    err = _err
    throw _err
} finally {

    if (err) {
        stage('Error dump') {
            echo "Pipeline failed: $err"
        }
    }

    stage('Notification') {
        if (config.sendNotif) {
            /* TBD
            def emailMessage = [
                body: '$DEFAULT_CONTENT',
                replyTo: '$DEFAULT_REPLYTO',
                subject: '$DEFAULT_SUBJECT',
                recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']]
            ]
            emailext emailMessage
            */
        }
    }
}
