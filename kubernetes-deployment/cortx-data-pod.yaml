apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortx-provisioner
  labels:
    app: cortx-provisioner
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cortx-provisioner
  template:
    metadata:
      labels:
        app: cortx-provisioner
    spec:
      volumes:
      - name: config-pvc-volume
        persistentVolumeClaim:
          claimName: cortx-config-pvc
      - name: cortx-config
        configMap:
          name: cortx-config
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchLabels:
                app: cortx-provisioner
      containers:
      - name: cortx-provisioner
        image: cortx-provisioner:latest
        imagePullPolicy: IfNotPresent
        args:
        - /bin/sh
        - -c
        - set -x;
          export PATH=$PATH:/opt/seagate/cortx/provisioner/bin;
          CORTX_CONF=yaml:/etc/cortx/cluster.conf;
          cortx_setup config apply yaml:/etc/cortx/solution/config.yaml $CORTX_CONF;
          cortx_setup config apply yaml:/etc/cortx/solution/cluster.yaml $CORTX_CONF;
          cortx_setup cluster bootstrap '1' $CORTX_CONF;
          ls /etc/cortx;
          cat /etc/cortx/cluster.conf;
          ls -l /etc/cortx/solution;
          cat /etc/cortx/solution/node-id;
          ln -sf /etc/cortx/solution/machine-id /etc/machine-id;
          cat /etc/cortx/solution/machine-id;
          cat /etc/machine-id;
          while true; do sleep 30; echo "Hello Kubernetes"; done;
        volumeMounts:
        - name: cortx-config
          mountPath: /etc/cortx/solution
        - name: config-pvc-volume
          mountPath: /etc/cortx
