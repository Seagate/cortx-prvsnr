#!/bin/bash
#
# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
# For any questions about this software or licensing, 
# please email opensource@seagate.com or cortx-questions@seagate.com."
#



set -euE

trap trap_handler ERR

SCRIPT_PATH=$(readlink -f "$0")
BASEDIR=$(dirname "$SCRIPT_PATH")
INSTALLDIR="/opt/seagate/cortx/provisioner"
LDR_R1_PRVSNR_REPO_API_TAGS='https://github.com/Seagate/cortx-prvsnr/tags'

LOG_FILE="${LOG_FILE:-/var/log/seagate/provisioner/setup-provisioner.log}"
export LOG_FILE


srvnode_2_hostspec=srvnode-2
hostspec=
srvnode_2_opt=false

salt_master_hostname=
prvsnr_repo_src=rpm
dev_repo=false

prvsnr_version=

tgt_build=
bundle_base_url=
bundled_release=false

cluster_id=$(uuidgen)

. $BASEDIR/common_utils/functions.sh

l_info "***** Running $0 *****"

function trap_handler {
    echo "***** FAILED!! *****"
    echo "For detailed error logs, please see: $LOG_FILE"
}

function usage {
  echo "\
Usage: $0 [options] [ldr-r1-prvsnr-version]

Installs the provisioner repository along with SaltStack
on the hosts with bare OS installed, sets up passwordless
ssh configuration and configures salt-master/salt-minion connections
and also makes some additional preliminary configuration.

'ldr-r1-prvsnr-version' as an optional positional argument might specify
the desired version of the provisioner to install. Makes sense for 'gitlab'
source only as of now. Not set by default.

General options:
$base_options_usage

Options:
       --srvnode-2=[user@]hostname      srvnode-2 host specification,
                                         default: $srvnode_2_hostspec
       --repo-src={local|gitrepo|rpm}    the source for provisioner repo installation,
                                         default: $prvsnr_repo_src
       --salt-master=HOSTNAME           domain name or IP of the salt-master
                                         default: not specified
       -S,  --singlenode                switch to single node mode setup
       --bundle                         switch to bundled release installation mode:
                                        target build url is treated as a base url of a
                                        a bundled distribution structure:
                                             <base_url>/
                                                  rhel7.7 or centos7.7
                                                  3rd_party
                                                  cortx_iso
"
}

# TODO
# - dry-run support

# TODO tests
function options_parser {
    set -eu

    case "$1" in
        --srvnode-2)
            srvnode_2_hostspec="$2"
            srvnode_2_opt=true
            ;;
        --repo-src)
            case "$2" in
                local|gitlab|gitrepo|rpm)
                    prvsnr_repo_src="$2"
                    ;;
                *)
                    l_error "Incorrect repo source: $1"
                    usage
                    exit 5
            esac
            ;;
        --salt-master)
            salt_master_hostname="$2"
            ;;
        -S|--singlenode)
            singlenode=true
            ;;
        --bundle)
            bundled_release=true
            ;;
        --dev)
            dev_repo=true
            ;;
        *)
            l_error "Unknown option: $1"
            exit 5
    esac
}


# TODO update tests
function positional_args_parser {
    set -eu

    if [[ $# -gt 1 ]]; then
        l_error "$0: Only one positional argument is expected, provided: $@"
        exit 2
    fi

    prvsnr_version="${1:-}"
}


parse_args 'S' 'srvnode-2:,repo-src:,salt-master:,singlenode,bundle,dev' options_parser positional_args_parser "$@"

if [[ "$verbosity" -ge 2 ]]; then
    set -x
fi

# cases:
#
#     CLUSTER
#       REMOTE mode:
#           DEFAULT ssh:
#               - spec for SECONDARY node might be any
#               - ASSUME that ssh settings for both nodes are there
#           CUSTOM ssh:
#               - spec for SECONDARY node might be any
#               - VERIFY that ssh settings for both nodes are IN CONFIG
#       LOCAL mode:
#           DEFAULT ssh:
#               - spec for SECONDARY node might be any
#               - ASSUME that ssh settings for secondary node are there
#           CUSTOM ssh:
#               - spec for SECONDARY node might be any
#               - VERIFY that ssh settings for secondary node are IN CONFIG
#
#     SINGLENODE
#       REMOTE mode:
#           DEFAULT ssh:
#               - ASSUME that ssh settings for salt-master are there
#           CUSTOM ssh:
#               - VERIFY salt-master ssh settings are IN CONFIG
#       LOCAL mode:
#           - no needs for ssh

# custom ssh config
if [[ -n "$ssh_config" ]]; then
    default_ssh_disabled=true
else
    if [[ "$singlenode" == false ]]; then
        setup_ssh
        # TODO test for that
        ssh_config="$default_ssh_conf"
    fi
fi

# CHECK srvnode-1/srvnode-2 OCCURENCE IN CUSTOM SSH-CONFIG
if [[ $default_ssh_disabled == true ]]; then
    if [[ -n "$hostspec" ]]; then
        if [[ -z "$ssh_config" || -z "$(check_host_in_ssh_config "$hostspec" "$ssh_config" 2>/dev/null)" ]]; then
            l_error "Invalid ssh configuration provided for srvnode-1 in ssh-config ($ssh_config)"
            exit 1
        fi
    fi
    if [[ "$singlenode" == false ]]; then
        if [[ -z "$ssh_config" || -z "$(check_host_in_ssh_config "$srvnode_2_hostspec" "$ssh_config" 2>/dev/null)" ]]; then
            l_error "Invalid ssh configuration provided for srvnode-2 in ssh-config ($ssh_config)"
            exit 1
        fi
    fi
fi

# TODO
#   - check that node(s) are reachable using provided ssh configuration
#     and provide a user clear details if it's not true
#   - tests for default ssh configuration for both singlenode and cluster modes

# TODO TEST EOS-12508
if [[ -z "$prvsnr_version" ]]; then
    if [[ "$prvsnr_repo_src" == "gitlab" ]]; then
        # get latest version of provisioner
        ! _tags=$(curl "$LDR_R1_PRVSNR_REPO_API_TAGS")
        prvsnr_version=$(echo "$_tags" | tr ',' '\n' | sed -n 's/.*"name":"\(.\+\)".*/\1/p' | head -n1)
    fi
elif [[ "$prvsnr_repo_src" == "rpm" ]]; then
    tgt_build="$prvsnr_version"

    if [[ "$bundled_release" == true ]]; then
        bundle_base_url="$prvsnr_version"
        prvsnr_version="$bundle_base_url/cortx_iso"
    fi
fi


if [[ -z "$prvsnr_version" && "$prvsnr_repo_src" != "local" && "$prvsnr_repo_src" != "rpm" ]]; then
    l_error 'provisioner repo version is unknown'
    exit 1
fi


if [[ -z "$salt_master_hostname" && "$singlenode" != true ]]; then
    l_info 'trying to auto-detect salt-master host for srvnode-2'
    _reachable_names="$(get_reachable_names "$hostspec" "$srvnode_2_hostspec" "$ssh_config" true)"

    if [[ -z "$_reachable_names" ]]; then
        l_warn "reachable salt-master hostname hasn't been detected"
    else
        _reachable_names_arr=
        read -r -a _reachable_names_arr <<< "$_reachable_names"
        salt_master_hostname="${_reachable_names_arr[0]}"
        l_info "salt-master hostname set as $salt_master_hostname"
    fi
fi

# SETUP SRVNODE-1
# FIXME bundle && redhat subscription
if grep -q "Red Hat" /etc/*-release || [[ "$bundled_release" == true ]]; then
    install_salt_repo "$hostspec" "$ssh_config" "$sudo" "$bundle_base_url"
else
    install_repos "$hostspec" "$ssh_config" "$sudo" "$bundle_base_url"
fi

configure_firewall "$hostspec" "$ssh_config" "$sudo"

install_salt "$hostspec" "$ssh_config" "$sudo"

install_provisioner "$prvsnr_repo_src" "$prvsnr_version" "$hostspec" "$ssh_config" "$sudo" "$singlenode" "$INSTALLDIR" "$dev_repo"

configure_salt srvnode-1 "$hostspec" "$ssh_config" "$sudo" true 127.0.0.1 "$INSTALLDIR"

accept_salt_key srvnode-1 "$hostspec" "$ssh_config" "$sudo"

set_node_id "$hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"

set_cluster_id "$cluster_id" "$hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"

# configure_multipath srvnode-1 "$hostspec" "$ssh_config" "$sudo" true

configure_provisioner_api_logs "$hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"

# SETUP SRVNODE-2
if [[ "$singlenode" != true ]]; then
    if grep -q "Red Hat" /etc/*-release; then
        install_salt_repo "$srvnode_2_hostspec" "$ssh_config" "$sudo" "$bundle_base_url"
    else
        install_repos "$srvnode_2_hostspec" "$ssh_config" "$sudo" "$bundle_base_url"
    fi

    configure_firewall "$srvnode_2_hostspec" "$ssh_config" "$sudo"

    install_salt "$srvnode_2_hostspec" "$ssh_config" "$sudo"

    install_provisioner "$prvsnr_repo_src" "$prvsnr_version" "$srvnode_2_hostspec" "$ssh_config" "$sudo" "$singlenode" "$INSTALLDIR" "$dev_repo"

    configure_salt srvnode-2 "$srvnode_2_hostspec" "$ssh_config" "$sudo" false "$salt_master_hostname" "$INSTALLDIR"
    # Always use salt-master hostspec to execute this step
    accept_salt_key srvnode-2 "$hostspec" "$ssh_config" "$sudo"

    set_node_id "$srvnode_2_hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"

    set_cluster_id "$cluster_id" "$srvnode_2_hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"

    # configure_multipath srvnode-2 "$srvnode_2_hostspec" "$ssh_config" "$sudo" false

fi

hostnamectl status | grep Chassis | grep -q server && {
    update_bmc_ip "srvnode-1" "$hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"
    if [[ "$singlenode" == false ]]; then
        update_bmc_ip "srvnode-2" "$srvnode_2_hostspec" "$ssh_config" "$sudo" "$INSTALLDIR"
    fi
}

#update hostname in cluster.sls
if [[ -n "$srvnode_1_hostname" ]]; then
    l_info "Updating hostnames in cluster pillar"
    if [[ -n "$srvnode_2_hostname" ]]; then
        update_cluster_pillar_hostname "srvnode-2" "$srvnode_2_hostname"
    fi
    update_cluster_pillar_hostname "srvnode-1" "$srvnode_1_hostname"
fi

# TODO TEST EOS-12508
#update target_build in release.sls
if [[ -n "$tgt_build" ]]; then
    l_info "Updating target build in release pillar"
    update_release_pillar $tgt_build $bundled_release
fi

cmd="$(build_command "$hostspec" "$ssh_config" "$sudo" 2>/dev/null)"
target_minions='*'
if [[ -n "$hostspec" ]]; then
    target_minions="'*'"
fi

# TODO test that
# if [[ "$singlenode" != true ]]; then
#     l_info "Triggering salt data mining"
#     # force salt to mine data
#     $cmd salt "$target_minions" mine.update
# fi

#TODO: Setup ssh passwordless configuration even when -F option is provided
# if -F option is used, setup passwordless ssh at the end.
#if [[ "$default_ssh_disabled" = "true" ]]; then
    #TODO: Update default ssh config file from user provided config file
    #srvnode_1_hostspec=srvnode-1
    #if [[ -z "$(check_hostname_in_ssh_config "$srvnode_1_hostspec" "$ssh_config" 2>/dev/null)" ]]; then
    #    l_error "Invalid ssh configuration provided for srvnode-1 in ssh-config ($ssh_config)"
    #    exit 1
    #fi
    #if [[ -z "$(check_hostname_in_ssh_config "$srvnode_2_hostspec" "$ssh_config" 2>/dev/null)" ]]; then
    #    l_error "Invalid ssh configuration provided for srvnode-2 in ssh-config ($ssh_config)"
    #    exit 1
    #fi
    #ssh_setup
#fi

l_info "Done"
l_info "***** SUCCESS! *****"
l_info "The detailed logs can be seen at: $LOG_FILE"
