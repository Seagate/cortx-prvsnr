/**
* Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU Affero General Public License for more details.
* You should have received a copy of the GNU Affero General Public License
* along with this program. If not, see <https://www.gnu.org/licenses/>.
* For any questions about this software or licensing,
* please email opensource@seagate.com or cortx-questions@seagate.com.
*/

node {
    properties([
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')),
        parameters([
            string(defaultValue: '', description: 'FQDN of VM to deploy on.', name: 'HOST_NAME', trim: true),
            string(defaultValue: '', description: '''Build having following directory structure:
                3rd_party/
                cortx_iso/
                iso/
                python_deps/
                README.txt
                RELEASE.INFO
                THIRD_PARTY_RELEASE.INFO''', name: 'BUILD_URL', trim: true),
            password(description: 'root user password for the target node.', name: 'PASSWORD')
        ])
    ])

    cleanWs()

    def remote = [:]
    withEnv(["CORTX_RELEASE_REPO=${BUILD_URL}","SSHPASS=${PASSWORD}"]) {
        ansiColor('xterm') {
            remote.name = "srvnode-1"
            remote.host = HOST_NAME
            remote.user = 'root'
            remote.password = PASSWORD
            remote.allowAnyHosts = true

            stage("Build URL Check") {
                sh label: '', returnStatus: true, script: '200 == $(curl -ksI ${BUILD_URL}/RELEASE.INFO|grep "HTTP/1.1" | cut -d " " -f 2)'
            }

            stage("SSH Connectivity Check") {
                sshCommand remote: remote, command: "exit"
                echo "Successfully connected to VM ${HOST_NAME}!"
            }
            
            stage("Storage Configuration Check") {
                try { 
                    sshCommand remote: remote, command: """
                        test 2 == \$(lsblk -d|grep -E 'sdb|sdc'|wc -l)
                    """
                    echo "The VM has exactly 2 nos. of attached disks. Check Successful!"
                } catch(Exception ex) {
                    error 'The VM should have exactly 2 attached disks. Kindly provide a VM with exactly 2 attached disks.'
                }
            }
            
            stage("Prepare config.ini") {
                sshCommand remote: remote, command: """
                    curl -ks https://gist.githubusercontent.com/ypise/d155805fca3b4ffa2defb2d6b82a814e/raw/6dfb47b23cc264585f5510eae455a744c8ad18e7/config.ini -o /root/config.ini
                """
                sshCommand remote: remote, command: """
                    sed -i 's/\${HOST_NAME}/${HOST_NAME}/g' /root/config.ini
                """
                echo "Successfully created config.ini file!"
            }
            
            stage("Download ISOs") {
                sshCommand remote: remote, command: """
                    mkdir /opt/isos
                    pushd /opt/isos
                    SINGLE_ISO=\$(curl -s ${CORTX_RELEASE_REPO}/iso/ | sed 's/<\\/*[^>]*>//g' | cut -f1 -d' ' | grep 'single.iso')
                    curl -O ${CORTX_RELEASE_REPO}/iso/\${SINGLE_ISO}
                    OS_ISO=\$(curl -s ${CORTX_RELEASE_REPO}/iso/ | sed 's/<\\/*[^>]*>//g' | cut -f1 -d' '|grep  "cortx-os")
                    curl -O ${CORTX_RELEASE_REPO}/iso/\${OS_ISO}
                    CORTX_PREP=\$(curl -s ${CORTX_RELEASE_REPO}/iso/ | sed 's/<\\/*[^>]*>//g' | cut -f1 -d' '|grep  ".sh")
                    curl -O ${CORTX_RELEASE_REPO}/iso/\${CORTX_PREP}
                    popd
                """
            }
            
            stage("Install Provisioner API") {
                sshCommand remote: remote, command: """
                    pushd /opt/isos
                    sh /opt/isos/cortx-prep*.sh
                    popd
                    provisioner --version
                """
                echo "Successfully installed Provisioner API!"
            }
            
            stage("Bootstrap Provisioner") {
                sshCommand remote: remote, command: """
                    yum install -y sshpass
                    SINGLE_ISO=\$(ls -1 /opt/isos/cortx-*-single.iso)
                    OS_ISO=\$(ls -1 /opt/isos/cortx-os-*.iso)
                    sshpass -p $PASSWORD provisioner setup_provisioner --logfile --logfile-filename /var/log/seagate/provisioner/setup.log --source iso --config-path ~/config.ini --iso-cortx \${SINGLE_ISO} --iso-os \${OS_ISO} srvnode-1:\$(hostname -f)
                    provisioner configure_setup /root/config.ini 1
                    salt-call state.apply components.system.config.pillar_encrypt
                    provisioner confstore_export
                """
                echo "Successfully bootstrapped provisioner!"
            }
            
            stage("Validate Bootstrap Provisioner") {
                sshCommand remote: remote, command: """
                    salt '*' test.ping
                    salt "*" service.stop puppet
                    salt "*" service.disable puppet
                    salt '*' pillar.get release
                    salt '*' grains.get node_id
                    salt '*' grains.get cluster_id
                    salt '*' grains.get roles
                """
                echo "Successfully validated bootstrap!"
            }
            
            stage("Platform Setup") {
                sshCommand remote: remote, command: """
                    provisioner deploy_vm --states system --setup-type single
                """
                echo "Successfully deployed system states!"
            }
            
            stage("3rd Party Software Deployment") {
                sshCommand remote: remote, command: """
                    provisioner deploy_vm --states prereq --setup-type single
                """
                echo "Successfully deployed prereq states!"
            }
            
            catchError {
                timeout(30) {
                    input 'Proceed with Data Path Stage?'
                }
                stage("Data Path States Deployment") {
                    sshCommand remote: remote, command: """
                        provisioner deploy_vm --states iopath --setup-type single
                    """
                    echo "Successfully deployed iopath states!"
                }
            }
            
            timeout(30) {
                input 'Proceed with Control Path Stage?'
            }
            stage("Control Stack States Deployment") {
                sshCommand remote: remote, command: """
                    provisioner deploy_vm --states controlpath --setup-type single
                """
                echo "Successfully deployed controlpath states!"
            }
            
            input 'Proceed with HA Setup Stage?'
            stage("HA States Deployment") {
                sshCommand remote: remote, command: """
                    provisioner deploy_vm --states ha --setup-type single
                """
                echo "Successfully deployed controlpath states!"
            }
        }

        sh label: '', script: "mkdir archives"
        sshGet remote: remote, from: '/opt/seagate/cortx_configs/provisioner_cluster.json', into: 'archives/provisioner_cluster.json', override: true
        sshGet remote: remote, from: '/var/log/seagate/provisioner/setup.log', into: 'archives/setup.log', override: true
        sshGet remote: remote, from: '/etc/yum.repos.d/RELEASE_FACTORY.INFO', into: 'archives/RELEASE_FACTORY.INFO', override: true
        archiveArtifacts artifacts: 'archives/provisioner_cluster.json,archives/setup.log,archives/RELEASE_FACTORY.INFO', followSymlinks: false
    }
}
